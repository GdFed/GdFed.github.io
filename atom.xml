<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GdFed &#39;S</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gdfed.github.io/"/>
  <updated>2017-08-31T12:03:41.739Z</updated>
  <id>https://gdfed.github.io/</id>
  
  <author>
    <name>GdFed</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3D全景图片实现</title>
    <link href="https://gdfed.github.io/2017/06/24/3D%E5%85%A8%E6%99%AF%E5%9B%BE%E7%89%87%E5%AE%9E%E7%8E%B0/"/>
    <id>https://gdfed.github.io/2017/06/24/3D全景图片实现/</id>
    <published>2017-06-24T07:22:58.000Z</published>
    <updated>2017-08-31T12:03:41.739Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><h5 id="科普"><a href="#科普" class="headerlink" title="科普"></a><strong>科普</strong></h5><p>全景图共分为三种：</p>
<p>①球面全景图</p>
<p>利用一张全景图围成一个球，自身位置位于球体内。由于图片是矩形，所以最上和最下的缝合处很明显就能够看得出来。</p>
<p>球面全景图是最接近人眼的构建模式，若利用多个立面构建，拼接方法繁琐，性能消耗高。</p>
<p>因此，本文介绍的是上述通过一张全景图构成的球面全景图。</p>
<p>②立方体全景图</p>
<p>一个立方体，有六个面组成，所以就需要六张图片啦。自身的位置位于立方体中间。这也是最常见的全景图构建模式。</p>
<p>③柱状全景图</p>
<p>这个则是前两种构建模式的结合版啦。</p>
<a id="more"></a>
<h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h5><p>在浏览器中实现3D全景浏览开发，首先需要几样东西：</p>
<p>①支持WebGL和canvas的浏览器</p>
<p>②Three.js</p>
<p>这里就不介绍这个插件了，所以阅读本文需要Three.js简单的基础 O(∩_∩)O~</p>
<p>下载地址：<a href="https://github.com/mrdoob/three.js" target="_blank" rel="external">https://github.com/mrdoob/three.js</a></p>
<p>③photo-sphere-viewer.js</p>
<p>这是基于Three.js开发的柱状全景图插件</p>
<p>下载地址：<a href="https://github.com/JeremyHeleine/Photo-Sphere-Viewer" target="_blank" rel="external">https://github.com/JeremyHeleine/Photo-Sphere-Viewer</a></p>
<p>④全景图</p>
<p>像上图那样的360度全景图，最好是左右能够完美拼接的，这样环顾时才自然。</p>
<p>现在也有能够生成全景图的工具，这里就不介绍啦。</p>
<p>全景图素材站点：<a href="http://www.tupian114.com/tupian/quanjing.html" target="_blank" rel="external">http://www.tupian114.com/tupian/quanjing.html</a></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>3D pic<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"VR模式"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./three.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./photo-sphere-viewer.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">        margin: 0;</span></div><div class="line"><span class="undefined">        padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    html,</span></div><div class="line"><span class="undefined">    body &#123;</span></div><div class="line"><span class="undefined">        width: 100%;</span></div><div class="line"><span class="undefined">        height: 100%;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var PSV;</span></div><div class="line"><span class="undefined">    init();</span></div><div class="line"><span class="undefined">    function init(rr) &#123;</span></div><div class="line"><span class="undefined">        PSV = new PhotoSphereViewer(&#123;</span></div><div class="line"><span class="undefined">            panorama: rr || './img/360.jpg',</span></div><div class="line"><span class="undefined">            container: document.getElementById('container'),</span></div><div class="line"><span class="undefined">            time_anim: false,</span></div><div class="line"><span class="undefined">            navbar: true,</span></div><div class="line"><span class="undefined">            anim_speed: '1rpm',</span></div><div class="line"><span class="undefined">            size: &#123;</span></div><div class="line"><span class="undefined">                width: '100%',</span></div><div class="line"><span class="undefined">                height: '90%'</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            tilt_down_max: Math.PI / 7,</span></div><div class="line"><span class="undefined">            tilt_up_max: Math.PI / 7</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span></div><div class="line"><span class="undefined">  document.querySelector("input[type=button]").onclick = function () &#123;</span></div><div class="line"><span class="undefined">        // PSV.toggleDeviceOrientation();</span></div><div class="line"><span class="undefined">        // PSV.toggleAutorotate();</span></div><div class="line"><span class="undefined">        PSV.toggleStereo();</span></div><div class="line"><span class="undefined">        // PSV.toggleFullscreen();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置参数介绍"><a href="#配置参数介绍" class="headerlink" title="配置参数介绍"></a>配置参数介绍</h4><ul>
<li><p>panorama：（必选）全景图的路径。</p>
</li>
<li><p>container：（必选）放置全景图的容器。</p>
</li>
<li><p>autoload：（默认为true）true为自动加载全景图，false为迟点加载全景图（通.过load方法）。</p>
</li>
<li><p>usexmpdata：（默认值为true）photo sphere viewer是否必须读入xmp数据，false为不必须。</p>
</li>
<li><p>cors_anonymous：（默认值为true）true为不能通过cookies获得用户</p>
</li>
<li><p>pano_size：（默认值为null）全景图的大小，是否裁切。</p>
</li>
<li><p>default_position：（默认值为0）定义默认位置，用户看见的第一个点，例如：{long: math.pi, lat: math.pi/2}。</p>
</li>
<li><p>min_fov：（默认值为30）观察的最小区域，单位degrees，在1-179之间。</p>
</li>
<li><p>max_fov：（默认值为90）观察的最大区域，单位degrees，在1-179之间。</p>
</li>
<li><p>allow_user_interactions：（默认值为true）设置为false，则禁止用户和全景图交互（导航条不可用）。</p>
</li>
<li><p>allow_scroll_to_zoom：（默认值为true）若设置为false，则用户不能通过鼠标滚动进行缩放图片。</p>
</li>
<li><p>tilt_up_max：（默认值为math.pi/2）向上倾斜的最大角度，单位radians。</p>
</li>
<li><p>tilt_down_max：（默认值为math.pi/2）向下倾斜的最大角度，单位radians。</p>
</li>
<li><p>min_longitude：（默认值为0）能够展示的最小经度。</p>
</li>
<li><p>max_longitude：（默认值为2PI）能够展示的最大维度。</p>
</li>
<li><p>zoome_level：（默认值为0）默认的缩放级别，值在0-100之间。</p>
</li>
<li><p>long_offset：（默认值为PI/360）mouse/touch移动时每像素经过的经度值。</p>
</li>
<li><p>lat_offset：（默认值为pi/180）mouse/touch移动时每像素经过的纬度值。</p>
</li>
<li><p>time_anim（默认值为2000）全景图在time_anim毫秒后会自动进行动画。（设置为false禁用它）</p>
</li>
<li><p>reverse_anim：（默认值为true）当水平方向到达最大/最小的经度时，动画方向是否反转（仅仅是不能看到完整的圆）。</p>
</li>
<li><p>anim_speed：（默认值为2rpm）动画每秒/分钟多少的速度。</p>
</li>
<li><p>vertical_anim_speed：（默认值为2rpm）垂直方向的动画每秒/分钟多少的速度。</p>
</li>
<li><p>vertical_anim_target：（默认值为0）当自动旋转时的维度，默认为赤道。</p>
</li>
<li><p>navbar：（默认为false）显示导航条。</p>
</li>
<li><p>navbar_style：（默认值为false）导航条的样式。有效的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- backgroundColor：导航条背景色（默认值rgba(61, 61, 61, 0.5)）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- buttonsColor：按钮前景色（默认值 rgba(255, 255, 255, 0.7)）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- buttonBackgroundColor：按钮激活时的背景色（默认值 rgba(255, 255, 255, 0.1)）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- buttonsHeight：按钮高度，单位px（默认值 20）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- autorotateThickness：自动旋转图片的层（默认值 1）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- zoomRangeWidth：缩放游标的宽度，单位px（默认值 50）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- zoomRangeThickness：缩放游标的层（默认值 1）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- zoomRangeDisk：缩放游标的放大率，单位px（默认值 7）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- fullscreenRatio：全屏图标的比例（默认值 4/3）；</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- fullscreenThickneee：全屏图片的层，单位px（默认值 2）</div></pre></td></tr></table></figure>
</li>
<li><p>loading_msg：（默认值为Loading…）加载信息。</p>
</li>
<li><p>loading_img：（默认值 为null）loading图片的路径。</p>
</li>
<li><p>loading_html：（默认值 为null）html加载器（添加到容器中的元素或字符串）。</p>
</li>
<li><p>size：（默认值为null）全景图容器的最终尺寸，例如{width: 500, height: 300}。</p>
</li>
<li><p>onready：（默认值为null）全景图准备好并且第一张图片展示出来后的回调函数。</p>
</li>
</ul>
<h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><ul>
<li>addAction()：添加事件（插件没有提供执行事件的方法，似乎是提供给插件内部使用的）。</li>
<li>fitToContainer()：调整全景图容器大小为指定大小。</li>
<li>getPosition()：获取坐标经纬度。</li>
<li>getPositionInDegrees()：获取经纬度度数。</li>
<li>getZoomLevel()：获取缩放级别。</li>
<li>load()：加载全景图（）。</li>
<li>moveTo(longitude, latitude)：根据经纬度移动到某一点。</li>
<li>rotate(dlong, dlat)：根据经纬度度数移动到某一点。</li>
<li>toggleAutorotate()：是否开启全景图自动旋转。</li>
<li>toggleDeviceOrientation()：是否开启重力感应方向控制。</li>
<li>toggleFullscreen()：是否开启全景图全屏。</li>
<li>toggleStereo()：是否开启立体效果（可用于WebVR哦）。</li>
<li>zoom(level)：设置缩放级别。</li>
<li>zoomIn()：放大。</li>
<li>zoomOut()：缩小。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h4&gt;&lt;h5 id=&quot;科普&quot;&gt;&lt;a href=&quot;#科普&quot; class=&quot;headerlink&quot; title=&quot;科普&quot;&gt;&lt;/a&gt;&lt;strong&gt;科普&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;全景图共分为三种：&lt;/p&gt;
&lt;p&gt;①球面全景图&lt;/p&gt;
&lt;p&gt;利用一张全景图围成一个球，自身位置位于球体内。由于图片是矩形，所以最上和最下的缝合处很明显就能够看得出来。&lt;/p&gt;
&lt;p&gt;球面全景图是最接近人眼的构建模式，若利用多个立面构建，拼接方法繁琐，性能消耗高。&lt;/p&gt;
&lt;p&gt;因此，本文介绍的是上述通过一张全景图构成的球面全景图。&lt;/p&gt;
&lt;p&gt;②立方体全景图&lt;/p&gt;
&lt;p&gt;一个立方体，有六个面组成，所以就需要六张图片啦。自身的位置位于立方体中间。这也是最常见的全景图构建模式。&lt;/p&gt;
&lt;p&gt;③柱状全景图&lt;/p&gt;
&lt;p&gt;这个则是前两种构建模式的结合版啦。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://gdfed.github.io/categories/js/"/>
    
    
      <category term="全景" scheme="https://gdfed.github.io/tags/%E5%85%A8%E6%99%AF/"/>
    
      <category term="threejs" scheme="https://gdfed.github.io/tags/threejs/"/>
    
      <category term="photo-sphere-viewer" scheme="https://gdfed.github.io/tags/photo-sphere-viewer/"/>
    
  </entry>
  
  <entry>
    <title>关于js自制多屏同步弹幕原理分析</title>
    <link href="https://gdfed.github.io/2017/05/23/%E5%85%B3%E4%BA%8Ejs%E8%87%AA%E5%88%B6%E5%A4%9A%E5%B1%8F%E5%90%8C%E6%AD%A5%E5%BC%B9%E5%B9%95%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://gdfed.github.io/2017/05/23/关于js自制多屏同步弹幕原理分析/</id>
    <published>2017-05-23T12:17:04.000Z</published>
    <updated>2017-08-31T12:03:48.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery-简洁版"><a href="#jQuery-简洁版" class="headerlink" title="jQuery 简洁版"></a>jQuery 简洁版</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol>
<li>输入框输入点击,生成随机样式的span</li>
<li>span弹幕从右往左运动</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>输入框输入点击,生成随机样式的span</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//弹幕内容</span></div><div class="line"><span class="keyword">var</span> barrageVal = $(<span class="string">'input'</span>).val();</div><div class="line"><span class="comment">//检测的弹屏宽度,用于后期运动距离</span></div><div class="line"><span class="keyword">var</span> widthSize = $(<span class="string">'.barrageShow'</span>).width();</div><div class="line"><span class="keyword">var</span> rightVal = widthSize;</div><div class="line"><span class="comment">//检测的弹屏高度,用于计算弹幕出现位置</span></div><div class="line"><span class="keyword">var</span> heightSize = $(<span class="string">'.barrageShow'</span>).height();</div><div class="line"><span class="comment">//弹幕出现的随机位置</span></div><div class="line"><span class="keyword">var</span> topVal = <span class="built_in">Math</span>.random() * heightSize;</div><div class="line"><span class="comment">//弹幕出现的随机颜色</span></div><div class="line"><span class="keyword">var</span> colorSize = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</div><div class="line"><span class="keyword">var</span> colorVal = <span class="string">'#'</span> + colorSize[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">16</span>)] + colorSize[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">16</span>)] +</div><div class="line">    colorSize[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">16</span>)] + colorSize[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">16</span>)] + colorSize[</div><div class="line">        <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">16</span>)] + colorSize[<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">16</span>)];</div><div class="line"><span class="comment">//弹幕出现的随机大小</span></div><div class="line"><span class="keyword">var</span> fontsizeVal = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">20</span> + <span class="number">12</span>);</div><div class="line"><span class="comment">//弹幕运动的随机速度</span></div><div class="line"><span class="keyword">var</span> speedVal = <span class="built_in">Math</span>.random() * <span class="number">5000</span> + <span class="number">10000</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>span弹幕从右往左运动</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (barrageVal.trim()) &#123;</div><div class="line">    <span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.barrageShow'</span>).appendChild(dom);</div><div class="line">    $(dom).html(barrageVal)</div><div class="line">          .css(&#123;</div><div class="line">             color: colorVal,</div><div class="line">             fontSize: fontsizeVal,</div><div class="line">             top: topVal</div><div class="line">              &#125;)</div><div class="line">          .animate(&#123;<span class="attr">right</span>: rightVal&#125;, speedVal , <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                        $(dom).fadeOut();</div><div class="line">              &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>缺陷<br>只能实现无刷新弹幕</p>
<p>改进思路<br>数据分离出来:<br>前台获取的数据, 先保存到后台;<br>前台要显示, 再从后台调取.</p>
</blockquote>
<h2 id="JSON-Ajax版-实现简单同步"><a href="#JSON-Ajax版-实现简单同步" class="headerlink" title="JSON+Ajax版 实现简单同步"></a>JSON+Ajax版 实现简单同步</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><ol>
<li>输入框输入点击,生成随机样式的span</li>
<li>span数据给后台将数据保存后</li>
<li>前台调取后台数据信息,完成span弹幕从右往左运动</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>输入框输入点击,生成随机样式的span</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//大同于第一版,其中添加</span></div><div class="line"><span class="comment">//topPer为出现的随机高度比例(代替之前的直接给值,因为不同屏幕高度不同)</span></div><div class="line"><span class="comment">//timeval为span弹幕创建时的时间戳(用于判断span的运动距离)</span></div><div class="line"><span class="keyword">var</span> timeVal = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line"><span class="keyword">var</span> topPer = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * heightSize) / heightSize;</div></pre></td></tr></table></figure>
<p>span数据给后台将数据保存后,并返回给前台</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">      url: <span class="string">'./data/getData.php'</span>,</div><div class="line">      type: <span class="string">'post'</span>,</div><div class="line">      data: &#123;</div><div class="line">          value: barrageVal,</div><div class="line">          timetemp: timeVal,</div><div class="line">          color: colorVal,</div><div class="line">          fontSize: fontsizeVal,</div><div class="line">          top: topPer,</div><div class="line">          speed: speedVal</div><div class="line">      &#125;,</div><div class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">backData</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(backData);&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;--对应的getData.php--&gt;</div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">   $value = addslashes($_POST[<span class="string">'value'</span>]);</div><div class="line">   $timetemp = addslashes($_POST[<span class="string">'timetemp'</span>]);</div><div class="line">   $color = addslashes($_POST[<span class="string">'color'</span>]);</div><div class="line">   $fontSize = addslashes($_POST[<span class="string">'fontSize'</span>]);</div><div class="line">   $top = addslashes($_POST[<span class="string">'top'</span>]);</div><div class="line">   $speed = addslashes($_POST[<span class="string">'speed'</span>]);</div><div class="line">   $str = <span class="string">'['</span>;</div><div class="line">   $obj = chop(ltrim(file_get_contents(<span class="string">'./backData/barrage.json'</span>),<span class="string">"[,"</span>) ,<span class="string">"]"</span>);</div><div class="line">   file_put_contents(<span class="string">'./backData/barrage.json'</span>,$obj);</div><div class="line">   file_put_contents(<span class="string">'./backData/barrage.json'</span>,<span class="string">',&#123;"value":"'</span>.$value.<span class="string">'","timetemp":"'</span>.$timetemp.<span class="string">'","color":"'</span>.$color.<span class="string">'","fontSize":"'</span>.$fontSize.<span class="string">'","top":"'</span>.$top.<span class="string">'","speed":"'</span>.$speed.<span class="string">'","wSize":"'</span>.$wSize.<span class="string">'"&#125;'</span>,FILE_APPEND);</div><div class="line">   $obj = ltrim(file_get_contents(<span class="string">'./backData/barrage.json'</span>),<span class="string">","</span>);</div><div class="line">   $str = $str.$obj;</div><div class="line">   $str =$str.<span class="string">']'</span>;</div><div class="line">   file_put_contents(<span class="string">'./backData/barrage.json'</span>,$str);</div><div class="line">   <span class="keyword">echo</span> <span class="string">'success!'</span>;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>前台根据数据信息,完成span弹幕从右往左运动</p>
<blockquote>
<p>其中一个思路要改变: 之前让每一个span弹幕自行animate运动;<br>现在则是设置定时器, 让barrageShow上的span弹幕改变right定位, 来模拟运动.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                url: <span class="string">'./data/showData.php'</span>,</div><div class="line">                data: &#123;&#125;,</div><div class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">backData</span>) </span>&#123;</div><div class="line">                    <span class="comment">//初始化</span></div><div class="line">                    $(<span class="string">'.barrageShow'</span>).html(<span class="string">''</span>);</div><div class="line">                    <span class="keyword">var</span> spanArr = <span class="built_in">JSON</span>.parse(backData);</div><div class="line">                    <span class="keyword">var</span> rightSize = $(<span class="string">'.barrageShow'</span>).width();</div><div class="line">                    <span class="keyword">var</span> dom = [];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spanArr.length; i++) &#123;</div><div class="line">                        <span class="keyword">var</span> topVal = spanArr[i].top * $(<span class="string">'.barrageShow'</span>).height();</div><div class="line">                        <span class="comment">//当前时间减去获取弹幕点击时的时间则可以知道弹幕已经运动多久,再根据其速度就可以得到向左运动的位置</span></div><div class="line">                        <span class="keyword">var</span> rightVal = (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - spanArr[i].timetemp) /spanArr[i].speed *rightSize - rightSize;</div><div class="line">                        <span class="comment">//弹幕运动到最左侧的就可以直接跳出这一步,不往下执行了</span></div><div class="line">                        <span class="keyword">if</span> (rightVal &gt; rightSize) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                        dom[i] = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">                        $(<span class="string">'.barrageShow'</span>).append(dom[i]);</div><div class="line"></div><div class="line">                        $(dom[i]).html(spanArr[i].value).css(&#123;</div><div class="line">                            color: spanArr[i].color,</div><div class="line">                            fontSize: spanArr[i].fontSize,</div><div class="line">                            top: topVal,</div><div class="line">                            right: rightVal</div><div class="line">                        &#125;)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;--对应的showData.php--&gt;</div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">   <span class="keyword">echo</span> file_get_contents(<span class="string">'./backData/barrage.json'</span>);</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>缺陷<br>能实现刷新数据不丢失<br>但不能实现多屏同步效果</p>
<p>改进思路<br>数据分离出来:<br>之前保存在json文件中,改进为保存在<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">MySQL</a><a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">数据库</a>;</p>
<p>时间戳:<br>这个概念非常重要,因为多屏同步, 每一个客户端的时间是不同的. 所以需要在加载网页的时候就要获取客户端的时间与服务器的时间来计算时间差;<br>将每一个客户端的时间都转换为服务器的时间. 这样每一个客户端发出的请求就都是以服务器为标准, 看上去, 客户端发布一条span弹幕, 每一个打开页面的客户端都可以同步看见.</p>
</blockquote>
<h2 id="Mysql-Ajax版-实现简单同步"><a href="#Mysql-Ajax版-实现简单同步" class="headerlink" title="Mysql+Ajax版 实现简单同步"></a>Mysql+Ajax版 实现简单同步</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><ol>
<li>输入框输入点击,生成随机样式的span</li>
<li>span数据给后台将数据保存后</li>
<li>前台调取后台数据信息,完成span弹幕从右往左运动</li>
</ol>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>增加时间差概念</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cilentTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line"><span class="keyword">var</span> timeDif;</div><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">'./data/getCilentTime.php'</span>,</div><div class="line">    data: &#123;&#125;,</div><div class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">backData</span>) </span>&#123;</div><div class="line">        timeDif = cilentTime - backData*<span class="number">1000</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;--对应的getCilentTime.php--&gt;</div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">   date_default_timezone_set(<span class="string">"Asia/Shanghai"</span>);</div><div class="line">   $now = time();</div><div class="line">   <span class="keyword">echo</span> $now;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>输入框输入点击,生成随机样式的span</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//大同于第二版</div><div class="line">//添加时间差12</div></pre></td></tr></table></figure>
<p>span数据给后台将数据保存后,并返回给前台</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">      url: <span class="string">'./data/getData.php'</span>,</div><div class="line">      type: <span class="string">'post'</span>,</div><div class="line">      data: &#123;</div><div class="line">          value: barrageVal,</div><div class="line">          timetemp: timeVal,</div><div class="line">          timeDif: timeDif,</div><div class="line">          color: colorVal,</div><div class="line">          fontSize: fontsizeVal,</div><div class="line">          top: topPer,</div><div class="line">          speed: speedVal</div><div class="line">      &#125;,</div><div class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">backData</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(backData);&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;--对应的getData.php--&gt;</div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">   <span class="keyword">include</span> <span class="string">'./sql_login.php'</span>;</div><div class="line"></div><div class="line">   $value = addslashes($_POST[<span class="string">'value'</span>]);</div><div class="line">   $timetemp = $_POST[<span class="string">'timetemp'</span>];</div><div class="line">   $timeDif = $_POST[<span class="string">'timeDif'</span>];</div><div class="line">   $color = addslashes($_POST[<span class="string">'color'</span>]);</div><div class="line">   $fontSize = $_POST[<span class="string">'fontSize'</span>];</div><div class="line">   $topPer = $_POST[<span class="string">'topPer'</span>];</div><div class="line">   $speed = $_POST[<span class="string">'speed'</span>];</div><div class="line"></div><div class="line">  $sql=<span class="string">"INSERT INTO barrage ( value, timetemp, timeDif, color, fontSize, topPer, speed, wSize, hSize)</span></div><div class="line"><span class="string">  VALUES</span></div><div class="line"><span class="string">  ('$value',$timetemp,$timeDif,'$color',$fontSize,$topPer,$speed,$wSize,$hSize)"</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!mysql_query($sql,$con))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'Error: '</span> . mysql_error());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">echo</span> <span class="string">'&#123;"status":"ok"&#125;'</span>;</div><div class="line"></div><div class="line">  mysql_close($con)</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>前台根据数据信息,完成span弹幕从右往左运动</p>
<blockquote>
<p>其中又一个思路要改变: 最之前让每一个span弹幕自行animate运动;<br>第二版则是设置定时器, 让barrageShow上的span弹幕改变right定位, 来模拟运动;<br>现在是让加载页面是执行第一版的逻辑; 之后barrageShow不断请求ajax数据, 有数据则添加到弹屏执行第一版的span弹幕逻辑</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> currentId = <span class="number">0</span>;   </div><div class="line">setTimeout(show, <span class="number">50</span>);</div><div class="line">setInterval(add, <span class="number">100</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">   $.ajax(&#123;</div><div class="line">       url: <span class="string">'./data/showData.php'</span>,</div><div class="line">       data: &#123;</div><div class="line">           timeDif: timeDif,</div><div class="line">           nowTime: nowTime,</div><div class="line">           barrageId: currentId</div><div class="line">       &#125;,</div><div class="line">       success: <span class="function"><span class="keyword">function</span> (<span class="params">backData</span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> spanArr = <span class="built_in">JSON</span>.parse(backData)[<span class="string">'list'</span>];</div><div class="line">           currentId = <span class="built_in">JSON</span>.parse(backData)[<span class="string">'lastId'</span>];</div><div class="line">           <span class="keyword">var</span> rightSize = $(<span class="string">'.swiper-container'</span>).width();</div><div class="line">           <span class="keyword">var</span> heightSize = $(<span class="string">'.swiper-container'</span>).height();</div><div class="line">           <span class="keyword">var</span> dom = [];</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spanArr.length; i++) &#123;</div><div class="line">               <span class="keyword">var</span> topVal = spanArr[i].topPer * heightSize;</div><div class="line">               <span class="keyword">var</span> rightVal = getRight();</div><div class="line">               dom[i] = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">               $(<span class="string">'.barrageShow'</span>).append(dom[i]);</div><div class="line">               $(dom[i]).html(spanArr[i].value).css(&#123;</div><div class="line">                       color: spanArr[i].color,</div><div class="line">                       fontSize: spanArr[i].fontSize + <span class="string">"px"</span>,</div><div class="line">                       top: topVal + <span class="string">"px"</span>,</div><div class="line">                       right: rightVal + <span class="string">"px"</span></div><div class="line">                   &#125;)</div><div class="line">                   .animate(&#123;</div><div class="line">                       right: rightSize + <span class="string">"px"</span></div><div class="line">                   &#125;, <span class="number">10000</span>);</div><div class="line"><span class="comment">//根据每个客户端时间不同进行换算成与服务器的时间同步</span></div><div class="line">               <span class="function"><span class="keyword">function</span> <span class="title">getRight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="keyword">var</span> timeXD = nowTime - timeDif + <span class="built_in">parseInt</span>(spanArr[i].timeDif);</div><div class="line">                   <span class="keyword">return</span> (timeXD - spanArr[i].timetemp) / spanArr[i].speed * rightSize - rightSize</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">   $.ajax(&#123;</div><div class="line">       url: <span class="string">'./data/showData.php'</span>,</div><div class="line">       data: &#123;</div><div class="line">           timeDif: timeDif,</div><div class="line">           nowTime: nowTime,</div><div class="line">           barrageId: currentId</div><div class="line">       &#125;,</div><div class="line">       success: <span class="function"><span class="keyword">function</span> (<span class="params">backData</span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> spanArr = <span class="built_in">JSON</span>.parse(backData)[<span class="string">'list'</span>];</div><div class="line">           currentId = <span class="built_in">JSON</span>.parse(backData)[<span class="string">'lastId'</span>];</div><div class="line">           <span class="keyword">var</span> rightSize = $(<span class="string">'.swiper-container'</span>).width();</div><div class="line">           <span class="keyword">var</span> heightSize = $(<span class="string">'.swiper-container'</span>).height();</div><div class="line">           <span class="keyword">var</span> dom = [];</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spanArr.length; i++) &#123;</div><div class="line">               <span class="keyword">var</span> topVal = spanArr[i].topPer * heightSize;</div><div class="line">               dom[i] = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">               $(<span class="string">'.barrageShow'</span>).append(dom[i]);</div><div class="line">               $(dom[i]).html(spanArr[i].value).css(&#123;</div><div class="line">                       color: spanArr[i].color,</div><div class="line">                       fontSize: spanArr[i].fontSize + <span class="string">"px"</span>,</div><div class="line">                       top: topVal + <span class="string">"px"</span>,</div><div class="line">                       right: -rightSize + <span class="string">"px"</span></div><div class="line">                   &#125;)</div><div class="line">                   .animate(&#123;</div><div class="line">                       right: rightSize + <span class="string">"px"</span></div><div class="line">                   &#125;, <span class="number">10000</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;--对应的showData.php--&gt;</div><div class="line"><span class="keyword">include</span> <span class="string">'./sql_login.php'</span>;</div><div class="line"></div><div class="line">$now = $_GET[<span class="string">'nowTime'</span>];</div><div class="line">$timeDif = $_GET[<span class="string">'timeDif'</span>];</div><div class="line">$barrageId = $_GET[<span class="string">'barrageId'</span>];</div><div class="line"></div><div class="line"><span class="comment">// 数据库查询语句</span></div><div class="line">$sql=<span class="string">"select * from barrage where Id &gt; '$barrageId'"</span>;</div><div class="line">$result = mysql_query($sql);</div><div class="line">$list = <span class="keyword">array</span>();</div><div class="line"><span class="comment">// $total = 0;</span></div><div class="line">$lastId = $barrageId;</div><div class="line"><span class="comment">// 获取数据</span></div><div class="line"><span class="keyword">while</span>($row = mysql_fetch_array($result))&#123;</div><div class="line">    $lastId = $row[<span class="string">'Id'</span>];</div><div class="line">    <span class="comment">//根据每个客户端时间不同进行换算成与服务器的时间同步</span></div><div class="line">    <span class="keyword">if</span>($now - $timeDif + $row[<span class="string">'timeDif'</span>] - $row[<span class="string">'timetemp'</span>] &gt; <span class="number">10000</span>)<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">    $item = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'barrageId'</span> =&gt; $row[<span class="string">'Id'</span>],</div><div class="line">    <span class="string">'value'</span> =&gt; $row[<span class="string">'value'</span>],</div><div class="line">    <span class="string">'timetemp'</span> =&gt; $row[<span class="string">'timetemp'</span>],</div><div class="line">    <span class="string">'timeDif'</span> =&gt; $row[<span class="string">'timeDif'</span>],</div><div class="line">    <span class="string">'color'</span> =&gt; $row[<span class="string">'color'</span>],</div><div class="line">    <span class="string">'fontSize'</span> =&gt; $row[<span class="string">'fontSize'</span>],</div><div class="line">    <span class="string">'topPer'</span> =&gt; $row[<span class="string">'topPer'</span>],</div><div class="line">    <span class="string">'speed'</span> =&gt; $row[<span class="string">'speed'</span>],</div><div class="line">    <span class="string">'wSize'</span> =&gt; $row[<span class="string">'wSize'</span>],</div><div class="line">    <span class="string">'hSize'</span> =&gt; $row[<span class="string">'hSize'</span>]</div><div class="line">    );</div><div class="line">    array_push($list,$item);</div><div class="line">    <span class="comment">// $total = $row['total'];</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> json_encode(</div><div class="line"><span class="keyword">array</span>(</div><div class="line">    <span class="comment">// 'total'=&gt; intval($total),</span></div><div class="line">    <span class="string">'lastId'</span>=&gt; $lastId,</div><div class="line">    <span class="string">'list'</span>=&gt;$list</div><div class="line">)</div><div class="line">);</div><div class="line"></div><div class="line">mysql_close($con);</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关键点(得到的经验):<br>\1. 时间戳概念<br>要实现同步,必须找寻每个客户端的共同点作为参数对比,时间戳就是一个物理参数;<br>刚开始以为客户端的时间将是同步的,但是忽略的他们之前是存在的误差(人为修改时间或本身误差),所以必须获取到这样的误差值,用来计算和服务器同步即可.<br>2.运动的表象<br><a href="http://lib.csdn.net/base/jquery" target="_blank" rel="external">jQuery</a>中的animate其实也是让元素一帧一帧的移动;<br>第一版,让每一个弹幕以个人来运动,以span弹幕为参照物,每次刷新的实为span弹幕; 第二版则以弹屏为参照物,给弹屏里的每一个span弹幕设置定位,刷新弹屏,同时改变span弹幕的定位位置(同时也以时间戳为参考了);第三版,在页面加载时(或者刷新),获取此刻弹屏上出现有span弹幕位置,让其从各自位置开始以自身为参考运动,然后不断异步获取后台数据,如有符合条件的span被获取,则让其从弹屏最右侧位置开始以自身为参考运动.<br>3.前后台交互<br>在开发过程中,出现了span弹幕重复打印并运行的情况,检查前台逻辑没有问题,再检查后台<a href="http://lib.csdn.net/base/php" target="_blank" rel="external">PHP</a>逻辑也没有问题,最后在浏览器控制台中检测到是以为数据请求及响应的时间过长,而<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="external">js</a>逻辑中刷新的频率较短,所以造成了重复打印多条.</p>
<blockquote>
<p>原因: setInterval(add, 100);而下面的TTFB时长1.06s</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20170730161002622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHpsMTk5MTA4MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<blockquote>
<p>解决过程:</p>
</blockquote>
<ul>
<li><p>往上一版进行<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="external">测试</a>,发现并没有造成TTFB过长,说明ajax异步时长不是影响,并且前台js逻辑也没有影响</p>
</li>
<li><p>那可能出在数据库上面,最后发现<a href="http://lib.csdn.net/base/php" target="_blank" rel="external">php</a>连接数据库的时候使用了localhost,这样会进行DNS解析,会耗时,最后改为127.0.01果然解决了这个问题</p>
<p><img src="http://img.blog.csdn.net/20170730161929771?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHpsMTk5MTA4MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
</ul>
<p>需改进之处:<br>已实现多屏同步弹屏,并且压力测试较为良好.但是,<br>页面在不断进行setInterval操作,对浏览器消耗较大,需要进行缓存机制的处理;<br>前、后台数据的交互太过频繁,需要优化数据交互逻辑;<br>如真实放在互联网上运行,同步机制需要更加灵活,需加入负载均衡机制;<br>待项目成熟应进行弹幕框架封装;<br>… …</p>
<p>前端的坑还会继续一个个地去踩;<br>在路上, 会一个一个把坑尽量看清楚些, 看透彻了,<br>为了下一次快掉进去之前, 不抽自己嘴巴子, 而是昂首跨过去,<br>“来哇,互相伤害哇”!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery-简洁版&quot;&gt;&lt;a href=&quot;#jQuery-简洁版&quot; class=&quot;headerlink&quot; title=&quot;jQuery 简洁版&quot;&gt;&lt;/a&gt;jQuery 简洁版&lt;/h2&gt;&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;输入框输入点击,生成随机样式的span&lt;/li&gt;
&lt;li&gt;span弹幕从右往左运动&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;p&gt;输入框输入点击,生成随机样式的span&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//弹幕内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; barrageVal = $(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;).val();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检测的弹屏宽度,用于后期运动距离&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; widthSize = $(&lt;span class=&quot;string&quot;&gt;&#39;.barrageShow&#39;&lt;/span&gt;).width();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rightVal = widthSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检测的弹屏高度,用于计算弹幕出现位置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; heightSize = $(&lt;span class=&quot;string&quot;&gt;&#39;.barrageShow&#39;&lt;/span&gt;).height();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//弹幕出现的随机位置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; topVal = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * heightSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//弹幕出现的随机颜色&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colorSize = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colorVal = &lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt; + colorSize[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)] + colorSize[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)] +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    colorSize[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)] + colorSize[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)] + colorSize[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)] + colorSize[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//弹幕出现的随机大小&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fontsizeVal = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//弹幕运动的随机速度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; speedVal = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="https://gdfed.github.io/categories/js/"/>
    
    
      <category term="jQuery" scheme="https://gdfed.github.io/tags/jQuery/"/>
    
      <category term="js" scheme="https://gdfed.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es5(转载)</title>
    <link href="https://gdfed.github.io/2017/05/15/es5-%E8%BD%AC%E8%BD%BD/"/>
    <id>https://gdfed.github.io/2017/05/15/es5-转载/</id>
    <published>2017-05-15T12:40:41.000Z</published>
    <updated>2017-08-31T12:09:24.390Z</updated>
    
    <content type="html"><![CDATA[<p><em>用更合理的方式写 JavaScript</em><br><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="table-of-contents">目录</a></h2><ol>
<li><a href="#types">类型</a></li>
<li><a href="#objects">对象</a></li>
<li><a href="#arrays">数组</a></li>
<li><a href="#strings">字符串</a></li>
<li><a href="#functions">函数</a></li>
<li><a href="#properties">属性</a></li>
<li><a href="#variables">变量</a></li>
<li><a href="#hoisting">提升</a></li>
<li><a href="#comparison-operators--equality">比较运算符 &amp; 等号</a></li>
<li><a href="#blocks">块</a></li>
<li><a href="#comments">注释</a></li>
<li><a href="#whitespace">空白</a></li>
<li><a href="#commas">逗号</a></li>
<li><a href="#semicolons">分号</a></li>
<li><a href="#type-casting--coercion">类型转化</a></li>
<li><a href="#naming-conventions">命名规则</a></li>
<li><a href="#accessors">存取器</a></li>
<li><a href="#constructors">构造函数</a></li>
<li><a href="#events">事件</a></li>
<li><a href="#modules">模块</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#ecmascript-5-compatibility">ECMAScript 5 兼容性</a></li>
<li><a href="#testing">测试</a></li>
<li><a href="#performance">性能</a></li>
<li><a href="#resources">资源</a></li>
<li><a href="#in-the-wild">谁在使用</a></li>
<li><a href="#translation">翻译</a></li>
<li><a href="#the-javascript-style-guide-guide">JavaScript 风格指南说明</a></li>
<li><a href="#chat-with-us-about-javascript">与我们讨论 JavaScript</a></li>
<li><a href="#contributors">贡献者</a></li>
<li><a href="#license">许可</a></li>
</ol>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a name="types">类型</a></h2><ul>
<li><p><strong>原始值</strong>: 存取直接作用于它自身。</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line"></div><div class="line">bar = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>复杂类型</strong>: 存取时作用于它自身值的引用。</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line"></div><div class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a name="objects">对象</a></h2><ul>
<li><p>使用直接量创建对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> item = &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用<a href="http://es5.github.io/#x7.6.1" target="_blank" rel="external">保留字</a>作为键名，它们在 IE8 下不工作。<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="external">更多信息</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="keyword">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  private: <span class="literal">true</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  defaults: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  hidden: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>使用同义词替换需要使用的保留字。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  class: 'alien'</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  klass: <span class="string">'alien'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  type: <span class="string">'alien'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a name="arrays">数组</a></h2><ul>
<li><p>使用直接量创建数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = [];</div></pre></td></tr></table></figure>
</li>
<li><p>向数组增加元素时使用 Array#push 来替代直接赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someStack = [];</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">someStack[someStack.length] = &apos;abracadabra&apos;;</div><div class="line"></div><div class="line">// good</div><div class="line">someStack.push(&apos;abracadabra&apos;);</div><div class="line">​</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 当你需要拷贝数组时，使用 Array#slice。[jsPerf](http://jsperf.com/converting-arguments-to-an-array/7)</div><div class="line"></div><div class="line">  ```javascript</div><div class="line">  var len = items.length;</div><div class="line">  var itemsCopy = [];</div><div class="line">  var i;</div><div class="line"></div><div class="line">  // bad</div><div class="line">  for (i = 0; i &lt; len; i++) &#123;</div><div class="line">    itemsCopy[i] = items[i];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // good</div><div class="line">  itemsCopy = items.slice();</div></pre></td></tr></table></figure>
<ul>
<li><p>使用 Array#slice 将类数组对象转换成数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><a name="strings">字符串</a></h2><ul>
<li><p>使用单引号 <code>&#39;&#39;</code> 包裹字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</div></pre></td></tr></table></figure>
</li>
<li><p>超过 100 个字符的字符串应该使用连接符写成多行。</p>
</li>
<li><p>注：若过度使用，通过连接符连接的长字符串可能会影响性能。<a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">讨论</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></div><div class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></div><div class="line"><span class="string">with this, you would get nowhere \</span></div><div class="line"><span class="string">fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</div><div class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</div><div class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>程序化生成的字符串使用 Array#join 连接而不是使用连接符。尤其是 IE 下：<a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">jsPerf</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items;</div><div class="line"><span class="keyword">var</span> messages;</div><div class="line"><span class="keyword">var</span> length;</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line">messages = [&#123;</div><div class="line">  state: <span class="string">'success'</span>,</div><div class="line">  message: <span class="string">'This one worked.'</span></div><div class="line">&#125;, &#123;</div><div class="line">  state: <span class="string">'success'</span>,</div><div class="line">  message: <span class="string">'This one worked as well.'</span></div><div class="line">&#125;, &#123;</div><div class="line">  state: <span class="string">'error'</span>,</div><div class="line">  message: <span class="string">'This one did not work.'</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">length = messages.length;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    <span class="comment">// use direct assignment in this case because we're micro-optimizing.</span></div><div class="line">    items[i] = <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;'</span> + items.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a name="functions">函数</a></h2><ul>
<li><p>函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匿名函数表达式</span></div><div class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 命名函数表达式</span></div><div class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 立即调用的函数表达式（IIFE）</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
</li>
<li><p>永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。</p>
</li>
<li><p><strong>注：</strong> ECMA-262 把 <code>块</code> 定义为一组语句。函数声明不是语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">阅读对 ECMA-262 这个问题的说明</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> test;</div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>永远不要把参数命名为 <code>arguments</code>。这将取代函数作用域内的 <code>arguments</code> 对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a name="properties">属性</a></h2><ul>
<li><p>使用 <code>.</code> 来访问对象的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  jedi: <span class="literal">true</span>,</div><div class="line">  age: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> isJedi = luke[<span class="string">'jedi'</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> isJedi = luke.jedi;</div></pre></td></tr></table></figure>
</li>
<li><p>当通过变量访问属性时使用中括号 <code>[]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  jedi: <span class="literal">true</span>,</div><div class="line">  age: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> luke[prop];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a name="variables">变量</a></h2><ul>
<li><p>总是使用 <code>var</code> 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">superPower = <span class="keyword">new</span> SuperPower();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>var</code> 声明每一个变量。<br>这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 <code>;</code> 跟 <code>,</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// （跟上面的代码比较一下，看看哪里错了）</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i;</div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> dragonball;</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> len;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball;</div><div class="line"><span class="keyword">var</span> length;</div><div class="line"><span class="keyword">var</span> i;</div></pre></td></tr></table></figure>
</li>
<li><p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad - 不必要的函数调用</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.setFirstName(name);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  name = getName();</div><div class="line">  <span class="keyword">this</span>.setFirstName(name);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a><a name="hoisting">提升</a></h2><ul>
<li><p>变量声明会提升至作用域顶部，但赋值不会。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。</span></div><div class="line"><span class="comment">// 注：变量赋值为 `true` 不会提升。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></div><div class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> declaredButNotAssigned;</div><div class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></div><div class="line">  declaredButNotAssigned = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>匿名函数表达式会提升它们的变量名，但不会提升函数的赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>命名函数表达式会提升变量名，但不会提升函数名或函数体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></div><div class="line"></div><div class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当函数名跟变量名一样时，表现也是如此。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数声明提升它们的名字和函数体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  superPower(); <span class="comment">// =&gt; Flying</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>了解更多信息在 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" target="_blank" rel="external">JavaScript Scoping &amp; Hoisting</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="external">Ben Cherry</a>.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="比较运算符-amp-等号"><a href="#比较运算符-amp-等号" class="headerlink" title="比较运算符 &amp; 等号"></a><a name="comparison-operators--equality">比较运算符 &amp; 等号</a></h2><ul>
<li><p>优先使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>.</p>
</li>
<li><p>条件表达式例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式并且总是遵守下面的规则：</p>
<ul>
<li><strong>对象</strong> 被计算为 <strong>true</strong></li>
<li><strong>Undefined</strong> 被计算为 <strong>false</strong></li>
<li><strong>Null</strong> 被计算为 <strong>false</strong></li>
<li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li>
<li><strong>数字</strong> 如果是 <strong>+0、-0 或 NaN</strong> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li>
<li><strong>字符串</strong> 如果是空字符串 <code>&#39;&#39;</code> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</div><div class="line">  <span class="comment">// true</span></div><div class="line">  <span class="comment">// 一个数组就是一个对象，对象被计算为 true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用快捷方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (name) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>了解更多信息在 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth Equality and JavaScript</a> by Angus Croll.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a><a name="blocks">块</a></h2><ul>
<li><p>使用大括号包裹所有的多行代码块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果通过 <code>if</code> 和 <code>else</code> 使用多行代码块，把 <code>else</code> 放在 <code>if</code> 代码块关闭括号的同一行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a name="comments">注释</a></h2><ul>
<li><p>使用 <code>/** ... */</code> 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// make() returns a new element</span></div><div class="line"><span class="comment">// based on the passed in tag name</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @param &#123;String&#125; tag</span></div><div class="line"><span class="comment">// @return &#123;Element&#125; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * make() returns a new element</span></div><div class="line"><span class="comment"> * based on the passed in tag name</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &#123;String&#125; tag</span></div><div class="line"><span class="comment"> * @return &#123;Element&#125; element</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>//</code> 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给注释增加 <code>FIXME</code> 或 <code>TODO</code> 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 <code>FIXME -- need to figure this out</code> 或者 <code>TODO -- need to implement</code>。</p>
</li>
<li><p>使用 <code>// FIXME:</code> 标注问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></div><div class="line">  total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>// TODO:</code> 标注问题的解决方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></div><div class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a><a name="whitespace">空白</a></h2><ul>
<li><p>使用 2 个空格作为缩进。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">∙∙∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在大括号前放一个空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dog.set(<span class="string">'attr'</span>,&#123;</div><div class="line">  age: <span class="string">'1 year'</span>,</div><div class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dog.set(<span class="string">'attr'</span>, &#123;</div><div class="line">  age: <span class="string">'1 year'</span>,</div><div class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>在控制语句（<code>if</code>、<code>while</code> 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span>(isJedi) &#123;</div><div class="line">  fight ();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (isJedi) &#123;</div><div class="line">  fight();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用空格把运算符隔开。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> x=y+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> x = y + <span class="number">5</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>在文件末尾插入一个空行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);↵</div><div class="line">↵</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);↵</div></pre></td></tr></table></figure>
</li>
<li><p>在使用长方法链时进行缩进。使用前面的点 <code>.</code> 强调这是方法调用而不是新语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).</div><div class="line">  find(<span class="string">'.selected'</span>).</div><div class="line">    highlight().</div><div class="line">    end().</div><div class="line">  find(<span class="string">'.open'</span>).</div><div class="line">    updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</div><div class="line">    .data(data)</div><div class="line">  .enter().append(<span class="string">'svg:svg'</span>)</div><div class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</div><div class="line">  .append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div></pre></td></tr></table></figure>
</li>
<li><p>在块末和新语句前插入空行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (foo) &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> baz;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (foo) &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> baz;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a><a name="commas">逗号</a></h2><ul>
<li><p>行首逗号: <strong>不需要</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> story = [</div><div class="line">    once</div><div class="line">  , upon</div><div class="line">  , aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> story = [</div><div class="line">  once,</div><div class="line">  upon,</div><div class="line">  aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">    firstName: <span class="string">'Bob'</span></div><div class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></div><div class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></div><div class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  firstName: <span class="string">'Bob'</span>,</div><div class="line">  lastName: <span class="string">'Parr'</span>,</div><div class="line">  heroName: <span class="string">'Mr. Incredible'</span>,</div><div class="line">  superPower: <span class="string">'strength'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>额外的行末逗号：<strong>不需要</strong>。这样做会在 IE6/7 和 IE9 怪异模式下引起问题。同样，多余的逗号在某些 ES3 的实现里会增加数组的长度。在 ES5 中已经澄清了 (<a href="http://es5.github.io/#D" target="_blank" rel="external">source</a>)：</p>
</li>
</ul>
<blockquote>
<p>Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the length of the array. This is not a semantic change from Edition 3 but some implementations may have previously misinterpreted this.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">​```javascript</div><div class="line">// bad</div><div class="line">var hero = &#123;</div><div class="line">  firstName: &apos;Kevin&apos;,</div><div class="line">  lastName: &apos;Flynn&apos;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var heroes = [</div><div class="line">  &apos;Batman&apos;,</div><div class="line">  &apos;Superman&apos;,</div><div class="line">];</div><div class="line"></div><div class="line">// good</div><div class="line">var hero = &#123;</div><div class="line">  firstName: &apos;Kevin&apos;,</div><div class="line">  lastName: &apos;Flynn&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var heroes = [</div><div class="line">  &apos;Batman&apos;,</div><div class="line">  &apos;Superman&apos;</div><div class="line">];</div><div class="line">​</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**[⬆ 回到顶部](#table-of-contents)**</div><div class="line"></div><div class="line">## &lt;a name=&quot;semicolons&quot;&gt;分号&lt;/a&gt;</div><div class="line"></div><div class="line">- **使用分号。**</div><div class="line"></div><div class="line">  ```javascript</div><div class="line">  // bad</div><div class="line">  (function () &#123;</div><div class="line">    var name = &apos;Skywalker&apos;</div><div class="line">    return name</div><div class="line">  &#125;)()</div><div class="line"></div><div class="line">  // good</div><div class="line">  (function () &#123;</div><div class="line">    var name = &apos;Skywalker&apos;;</div><div class="line">    return name;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  // good (防止函数在两个 IIFE 合并时被当成一个参数</div><div class="line">  ;(function () &#123;</div><div class="line">    var name = &apos;Skywalker&apos;;</div><div class="line">    return name;</div><div class="line">  &#125;)();</div></pre></td></tr></table></figure>
<p>  <a href="http://stackoverflow.com/a/7365214/1712802" target="_blank" rel="external">了解更多</a>.</p>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><a name="type-casting--coercion">类型转换</a></h2><ul>
<li><p>在语句开始时执行类型转换。</p>
</li>
<li><p>字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>parseInt</code> 转换数字时总是带上类型转换的基数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = +inputValue;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>如果因为某些原因 <code>parseInt</code> 成为你所做的事的瓶颈而需要使用位操作解决<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="external">性能问题</a>时，留个注释说清楚原因和你的目的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></div><div class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></div><div class="line"><span class="comment"> * Number made it a lot faster.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>注：</strong> 小心使用位操作运算符。数字会被当成 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="external">64 位值</a>，但是位操作运算符总是返回 32 位的整数（<a href="http://es5.github.io/#x11.7" target="_blank" rel="external">source</a>）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。<a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="external">讨论</a>。最大的 32 位整数是 2,147,483,647：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></div><div class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></div><div class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></div></pre></td></tr></table></figure>
</li>
<li><p>布尔:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = !!age;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><a name="naming-conventions">命名规则</a></h2><ul>
<li><p>避免单字母命名。命名应具备描述性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用驼峰式命名对象、函数和实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用帕斯卡式命名构造函数或类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</div><div class="line">  name: <span class="string">'nope'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</div><div class="line">  name: <span class="string">'yup'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用下划线前/后缀。</p>
</li>
</ul>
<blockquote>
<p>为什么？JavaScript 并没有私有属性或私有方法的概念。虽然使用下划线是表示「私有」的一种共识，但实际上这些属性是完全公开的，它本身就是你公共接口的一部分。这种习惯或许会导致开发者错误的认为改动它不会造成破坏或者不需要去测试。长话短说：如果你想要某处为「私有」，它必须不能是显式提出的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">​```javascript</div><div class="line">// bad</div><div class="line">this.__firstName__ = &apos;Panda&apos;;</div><div class="line">this.firstName_ = &apos;Panda&apos;;</div><div class="line">this._firstName = &apos;Panda&apos;;</div><div class="line"></div><div class="line">// good</div><div class="line">this.firstName = &apos;Panda&apos;;</div><div class="line">​</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 不要保存 `this` 的引用。使用 Function#bind。</div><div class="line"></div><div class="line">  ```javascript</div><div class="line">  // bad</div><div class="line">  function () &#123;</div><div class="line">    var self = this;</div><div class="line">    return function () &#123;</div><div class="line">      console.log(self);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // bad</div><div class="line">  function () &#123;</div><div class="line">    var that = this;</div><div class="line">    return function () &#123;</div><div class="line">      console.log(that);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // bad</div><div class="line">  function () &#123;</div><div class="line">    var _this = this;</div><div class="line">    return function () &#123;</div><div class="line">      console.log(_this);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // good</div><div class="line">  function () &#123;</div><div class="line">    return function () &#123;</div><div class="line">      console.log(this);</div><div class="line">    &#125;.bind(this);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>给函数命名。这在做堆栈轨迹时很有帮助。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>注：</strong> IE8 及以下版本对命名函数表达式的处理有些怪异。了解更多信息到 <a href="http://kangax.github.io/nfe/" target="_blank" rel="external">http://kangax.github.io/nfe/</a>。</p>
</li>
<li><p>如果你的文件导出一个类，你的文件名应该与类名完全相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file contents</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = CheckBox;</div><div class="line"></div><div class="line"><span class="comment">// in some other file</span></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./checkBox'</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./check_box'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./CheckBox'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a><a name="accessors">存取器</a></h2><ul>
<li><p>属性的存取函数不是必须的。</p>
</li>
<li><p>如果你需要存取函数时使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.getAge();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age(<span class="number">25</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.setAge(<span class="number">25</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>如果属性是布尔值，使用 <code>isVal()</code> 或 <code>hasVal()</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建 get() 和 set() 函数是可以的，但要保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</div><div class="line">  <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>[key] = val;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><a name="constructors">构造函数</a></h2><ul>
<li><p>给对象原型分配方法，而不是使用一个新对象覆盖原型。覆盖原型将导致继承出现问题：重设原型将覆盖原有原型！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype = &#123;</div><div class="line">  fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  block: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>方法可以返回 <code>this</code> 来实现方法链式使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line">luke.jump(); <span class="comment">// =&gt; true</span></div><div class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line"></div><div class="line">luke.jump()</div><div class="line">  .setHeight(<span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>写一个自定义的 <code>toString()</code> 方法是可以的，但是确保它可以正常工作且不会产生副作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a name="events">事件</a></h2><ul>
<li><p>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, listingId</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>更好的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with data.listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a name="modules">模块</a></h2><ul>
<li><p>模块应该以 <code>!</code> 开始。这样确保了当一个不好的模块忘记包含最后的分号时，在合并代码到生产环境后不会产生错误。<a href="https://github.com/airbnb/javascript/issues/44#issuecomment-13063933" target="_blank" rel="external">详细说明</a></p>
</li>
<li><p>文件应该以驼峰式命名，并放在同名的文件夹里，且与导出的名字一致。</p>
</li>
<li><p>增加一个名为 <code>noConflict()</code> 的方法来设置导出的模块为前一个版本并返回它。</p>
</li>
<li><p>永远在模块顶部声明 <code>&#39;use strict&#39;;</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fancyInput/fancyInput.js</span></div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    global.FancyInput = previousFancyInput;</div><div class="line">    <span class="keyword">return</span> FancyInput;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  global.FancyInput = FancyInput;</div><div class="line">&#125;(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><a name="jquery">jQuery</a></h2><ul>
<li><p>使用 <code>$</code> 作为存储 jQuery 对象的变量名前缀。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>缓存 jQuery 查询。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line">  $sidebar.hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $sidebar.css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对 DOM 查询使用层叠 <code>$(&#39;.sidebar ul&#39;)</code> 或 父元素 &gt; 子元素 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a></p>
</li>
<li><p>对有作用域的 jQuery 对象查询使用 <code>find</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="ECMAScript-5-兼容性"><a href="#ECMAScript-5-兼容性" class="headerlink" title="ECMAScript 5 兼容性"></a><a name="ecmascript-5-compatibility">ECMAScript 5 兼容性</a></h2><ul>
<li>参考 <a href="https://twitter.com/kangax/" target="_blank" rel="external">Kangax</a> 的 ES5 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="external">兼容表</a>.</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a name="testing">测试</a></h2><ul>
<li><p><strong>Yup.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a><a name="performance">性能</a></h2><ul>
<li><a href="http://kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="external">On Layout &amp; Web Performance</a></li>
<li><a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">String vs Array Concat</a></li>
<li><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="external">Try/Catch Cost In a Loop</a></li>
<li><a href="http://jsperf.com/bang-function" target="_blank" rel="external">Bang Function</a></li>
<li><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="external">jQuery Find vs Context, Selector</a></li>
<li><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="external">innerHTML vs textContent for script text</a></li>
<li><a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">Long String Concatenation</a></li>
<li>Loading…</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="resources">资源</a></h2><p><strong>推荐阅读</strong></p>
<ul>
<li><a href="http://es5.github.com/" target="_blank" rel="external">Annotated ECMAScript 5.1</a></li>
</ul>
<p><strong>工具</strong></p>
<ul>
<li>Code Style Linters<ul>
<li><a href="http://www.jshint.com/" target="_blank" rel="external">JSHint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc" target="_blank" rel="external">Airbnb Style .jshintrc</a></li>
<li><a href="https://github.com/jscs-dev/node-jscs" target="_blank" rel="external">JSCS</a> - <a href="https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json" target="_blank" rel="external">Airbnb Style Preset</a></li>
</ul>
</li>
</ul>
<p><strong>其它风格指南</strong></p>
<ul>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="external">Google JavaScript Style Guide</a></li>
<li><a href="http://docs.jquery.com/JQuery_Core_Style_Guidelines" target="_blank" rel="external">jQuery Core Style Guidelines</a></li>
<li><a href="https://github.com/rwldrn/idiomatic.js/" target="_blank" rel="external">Principles of Writing Consistent, Idiomatic JavaScript</a></li>
<li><a href="https://github.com/feross/standard" target="_blank" rel="external">JavaScript Standard Style</a></li>
</ul>
<p><strong>其它风格</strong></p>
<ul>
<li><a href="https://gist.github.com/4135065" target="_blank" rel="external">Naming this in nested functions</a> - Christian Johansen</li>
<li><a href="https://github.com/airbnb/javascript/issues/52" target="_blank" rel="external">Conditional Callbacks</a> - Ross Allen</li>
<li><a href="http://sideeffect.kr/popularconvention/#javascript" target="_blank" rel="external">Popular JavaScript Coding Conventions on Github</a> - JeongHoon Byun</li>
<li><a href="http://benalman.com/news/2012/05/multiple-var-statements-javascript/" target="_blank" rel="external">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li>
</ul>
<p><strong>进一步阅读</strong></p>
<ul>
<li><a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="external">Understanding JavaScript Closures</a> - Angus Croll</li>
<li><a href="http://www.2ality.com/2013/06/basic-javascript.html" target="_blank" rel="external">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li>
<li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="external">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li>
<li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">ES6 Features</a> - Luke Hoban</li>
<li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="external">Frontend Guidelines</a> - Benjamin De Cock</li>
</ul>
<p><strong>书籍</strong></p>
<ul>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="external">JavaScript: The Good Parts</a> - Douglas Crockford</li>
<li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752" target="_blank" rel="external">JavaScript Patterns</a> - Stoyan Stefanov</li>
<li><a href="http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X" target="_blank" rel="external">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li>
<li><a href="http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309" target="_blank" rel="external">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li>
<li><a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680" target="_blank" rel="external">Maintainable JavaScript</a> - Nicholas C. Zakas</li>
<li><a href="http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X" target="_blank" rel="external">JavaScript Web Applications</a> - Alex MacCaw</li>
<li><a href="http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273" target="_blank" rel="external">Pro JavaScript Techniques</a> - John Resig</li>
<li><a href="http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595" target="_blank" rel="external">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li>
<li><a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X" target="_blank" rel="external">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li>
<li><a href="http://humanjavascript.com/" target="_blank" rel="external">Human JavaScript</a> - Henrik Joreteg</li>
<li><a href="http://superherojs.com/" target="_blank" rel="external">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li>
<li><a href="http://jsbooks.revolunet.com/" target="_blank" rel="external">JSBooks</a> - Julien Bouquillon</li>
<li><a href="http://manning.com/vinegar/" target="_blank" rel="external">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li>
<li><a href="http://amzn.com/0321812182" target="_blank" rel="external">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li>
<li><a href="http://eloquentjavascript.net" target="_blank" rel="external">Eloquent JavaScript</a> - Marijn Haverbeke</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Don’t Know JS</a> - Kyle Simpson</li>
</ul>
<p><strong>博客</strong></p>
<ul>
<li><a href="http://dailyjs.com/" target="_blank" rel="external">DailyJS</a></li>
<li><a href="http://javascriptweekly.com/" target="_blank" rel="external">JavaScript Weekly</a></li>
<li><a href="http://javascriptweblog.wordpress.com/" target="_blank" rel="external">JavaScript, JavaScript…</a></li>
<li><a href="http://weblog.bocoup.com/" target="_blank" rel="external">Bocoup Weblog</a></li>
<li><a href="http://www.adequatelygood.com/" target="_blank" rel="external">Adequately Good</a></li>
<li><a href="http://www.nczonline.net/" target="_blank" rel="external">NCZOnline</a></li>
<li><a href="http://perfectionkills.com/" target="_blank" rel="external">Perfection Kills</a></li>
<li><a href="http://benalman.com/" target="_blank" rel="external">Ben Alman</a></li>
<li><a href="http://dmitry.baranovskiy.com/" target="_blank" rel="external">Dmitry Baranovskiy</a></li>
<li><a href="http://dustindiaz.com/" target="_blank" rel="external">Dustin Diaz</a></li>
<li><a href="http://net.tutsplus.com/?s=javascript" target="_blank" rel="external">nettuts</a></li>
</ul>
<p><strong>播客</strong></p>
<ul>
<li><a href="http://devchat.tv/js-jabber/" target="_blank" rel="external">JavaScript Jabber</a></li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="谁在使用"><a href="#谁在使用" class="headerlink" title="谁在使用"></a><a name="in-the-wild">谁在使用</a></h2><p>  这是一个使用本风格指南的组织列表。给我们发 pull request 或开一个 issue 让我们将你增加到列表上。</p>
<ul>
<li><strong>Aan Zee</strong>: <a href="https://github.com/AanZee/javascript" target="_blank" rel="external">AanZee/javascript</a></li>
<li><strong>Adult Swim</strong>: <a href="https://github.com/adult-swim/javascript" target="_blank" rel="external">adult-swim/javascript</a></li>
<li><strong>Airbnb</strong>: <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">airbnb/javascript</a></li>
<li><strong>Apartmint</strong>: <a href="https://github.com/apartmint/javascript" target="_blank" rel="external">apartmint/javascript</a></li>
<li><strong>Avalara</strong>: <a href="https://github.com/avalara/javascript" target="_blank" rel="external">avalara/javascript</a></li>
<li><strong>Billabong</strong>: <a href="https://github.com/billabong/javascript" target="_blank" rel="external">billabong/javascript</a></li>
<li><strong>Compass Learning</strong>: <a href="https://github.com/compasslearning/javascript-style-guide" target="_blank" rel="external">compasslearning/javascript-style-guide</a></li>
<li><strong>DailyMotion</strong>: <a href="https://github.com/dailymotion/javascript" target="_blank" rel="external">dailymotion/javascript</a></li>
<li><strong>Digitpaint</strong> <a href="https://github.com/digitpaint/javascript" target="_blank" rel="external">digitpaint/javascript</a></li>
<li><strong>Evernote</strong>: <a href="https://github.com/evernote/javascript-style-guide" target="_blank" rel="external">evernote/javascript-style-guide</a></li>
<li><strong>ExactTarget</strong>: <a href="https://github.com/ExactTarget/javascript" target="_blank" rel="external">ExactTarget/javascript</a></li>
<li><strong>Flexberry</strong>: <a href="https://github.com/Flexberry/javascript-style-guide" target="_blank" rel="external">Flexberry/javascript-style-guide</a></li>
<li><strong>Gawker Media</strong>: <a href="https://github.com/gawkermedia/javascript" target="_blank" rel="external">gawkermedia/javascript</a></li>
<li><strong>General Electric</strong>: <a href="https://github.com/GeneralElectric/javascript" target="_blank" rel="external">GeneralElectric/javascript</a></li>
<li><strong>GoodData</strong>: <a href="https://github.com/gooddata/gdc-js-style" target="_blank" rel="external">gooddata/gdc-js-style</a></li>
<li><strong>Grooveshark</strong>: <a href="https://github.com/grooveshark/javascript" target="_blank" rel="external">grooveshark/javascript</a></li>
<li><strong>How About We</strong>: <a href="https://github.com/howaboutwe/javascript" target="_blank" rel="external">howaboutwe/javascript</a></li>
<li><strong>InfoJobs</strong>: <a href="https://github.com/InfoJobs/JavaScript-Style-Guide" target="_blank" rel="external">InfoJobs/JavaScript-Style-Guide</a></li>
<li><strong>Intent Media</strong>: <a href="https://github.com/intentmedia/javascript" target="_blank" rel="external">intentmedia/javascript</a></li>
<li><strong>Jam3</strong>: <a href="https://github.com/Jam3/Javascript-Code-Conventions" target="_blank" rel="external">Jam3/Javascript-Code-Conventions</a></li>
<li><strong>JSSolutions</strong>: <a href="https://github.com/JSSolutions/javascript" target="_blank" rel="external">JSSolutions/javascript</a></li>
<li><strong>Kinetica Solutions</strong>: <a href="https://github.com/kinetica/javascript" target="_blank" rel="external">kinetica/javascript</a></li>
<li><strong>Mighty Spring</strong>: <a href="https://github.com/mightyspring/javascript" target="_blank" rel="external">mightyspring/javascript</a></li>
<li><strong>MinnPost</strong>: <a href="https://github.com/MinnPost/javascript" target="_blank" rel="external">MinnPost/javascript</a></li>
<li><strong>ModCloth</strong>: <a href="https://github.com/modcloth/javascript" target="_blank" rel="external">modcloth/javascript</a></li>
<li><strong>Money Advice Service</strong>: <a href="https://github.com/moneyadviceservice/javascript" target="_blank" rel="external">moneyadviceservice/javascript</a></li>
<li><strong>Muber</strong>: <a href="https://github.com/muber/javascript" target="_blank" rel="external">muber/javascript</a></li>
<li><strong>National Geographic</strong>: <a href="https://github.com/natgeo/javascript" target="_blank" rel="external">natgeo/javascript</a></li>
<li><strong>National Park Service</strong>: <a href="https://github.com/nationalparkservice/javascript" target="_blank" rel="external">nationalparkservice/javascript</a></li>
<li><strong>Nimbl3</strong>: <a href="https://github.com/nimbl3/javascript" target="_blank" rel="external">nimbl3/javascript</a></li>
<li><strong>Nordic Venture Family</strong>: <a href="https://github.com/CodeDistillery/javascript" target="_blank" rel="external">CodeDistillery/javascript</a></li>
<li><strong>Orion Health</strong>: <a href="https://github.com/orionhealth/javascript" target="_blank" rel="external">orionhealth/javascript</a></li>
<li><strong>Peerby</strong>: <a href="https://github.com/Peerby/javascript" target="_blank" rel="external">Peerby/javascript</a></li>
<li><strong>Razorfish</strong>: <a href="https://github.com/razorfish/javascript-style-guide" target="_blank" rel="external">razorfish/javascript-style-guide</a></li>
<li><strong>reddit</strong>: <a href="https://github.com/reddit/styleguide/tree/master/javascript" target="_blank" rel="external">reddit/styleguide/javascript</a></li>
<li><strong>REI</strong>: <a href="https://github.com/reidev/js-style-guide" target="_blank" rel="external">reidev/js-style-guide</a></li>
<li><strong>Ripple</strong>: <a href="https://github.com/ripple/javascript-style-guide" target="_blank" rel="external">ripple/javascript-style-guide</a></li>
<li><strong>SeekingAlpha</strong>: <a href="https://github.com/seekingalpha/javascript-style-guide" target="_blank" rel="external">seekingalpha/javascript-style-guide</a></li>
<li><strong>Shutterfly</strong>: <a href="https://github.com/shutterfly/javascript" target="_blank" rel="external">shutterfly/javascript</a></li>
<li><strong>StudentSphere</strong>: <a href="https://github.com/studentsphere/javascript" target="_blank" rel="external">studentsphere/javascript</a></li>
<li><strong>Super</strong>: <a href="https://github.com/SuperJobs/javascript" target="_blank" rel="external">SuperJobs/javascript</a></li>
<li><strong>SysGarage</strong>: <a href="https://github.com/sysgarage/javascript-style-guide" target="_blank" rel="external">sysgarage/javascript-style-guide</a></li>
<li><strong>Target</strong>: <a href="https://github.com/target/javascript" target="_blank" rel="external">target/javascript</a></li>
<li><strong>TheLadders</strong>: <a href="https://github.com/TheLadders/javascript" target="_blank" rel="external">TheLadders/javascript</a></li>
<li><strong>T4R Technology</strong>: <a href="https://github.com/T4R-Technology/javascript" target="_blank" rel="external">T4R-Technology/javascript</a></li>
<li><strong>VoxFeed</strong>: <a href="https://github.com/VoxFeed/javascript-style-guide" target="_blank" rel="external">VoxFeed/javascript-style-guide</a></li>
<li><strong>Weggo</strong>: <a href="https://github.com/Weggo/javascript" target="_blank" rel="external">Weggo/javascript</a></li>
<li><strong>Zillow</strong>: <a href="https://github.com/zillow/javascript" target="_blank" rel="external">zillow/javascript</a></li>
<li><strong>ZocDoc</strong>: <a href="https://github.com/ZocDoc/javascript" target="_blank" rel="external">ZocDoc/javascript</a></li>
</ul>
<h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a><a name="translation">翻译</a></h2><p>  这份风格指南也提供了其它语言的版本：</p>
<ul>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png" alt="br"> <strong>Brazilian Portuguese</strong>: <a href="https://github.com/armoucar/javascript-style-guide" target="_blank" rel="external">armoucar/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png" alt="bg"> <strong>Bulgarian</strong>: <a href="https://github.com/borislavvv/javascript" target="_blank" rel="external">borislavvv/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png" alt="ca"> <strong>Catalan</strong>: <a href="https://github.com/fpmweb/javascript-style-guide" target="_blank" rel="external">fpmweb/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png" alt="tw"> <strong>Chinese(Traditional)</strong>: <a href="https://github.com/jigsawye/javascript" target="_blank" rel="external">jigsawye/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png" alt="cn"> <strong>Chinese(Simplified)</strong>: <a href="https://github.com/sivan/javascript" target="_blank" rel="external">sivan/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png" alt="fr"> <strong>French</strong>: <a href="https://github.com/nmussy/javascript-style-guide" target="_blank" rel="external">nmussy/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png" alt="de"> <strong>German</strong>: <a href="https://github.com/timofurrer/javascript-style-guide" target="_blank" rel="external">timofurrer/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png" alt="it"> <strong>Italian</strong>: <a href="https://github.com/sinkswim/javascript-style-guide" target="_blank" rel="external">sinkswim/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png" alt="jp"> <strong>Japanese</strong>: <a href="https://github.com/mitsuruog/javacript-style-guide" target="_blank" rel="external">mitsuruog/javacript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png" alt="kr"> <strong>Korean</strong>: <a href="https://github.com/tipjs/javascript-style-guide" target="_blank" rel="external">tipjs/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png" alt="pl"> <strong>Polish</strong>: <a href="https://github.com/mjurczyk/javascript" target="_blank" rel="external">mjurczyk/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png" alt="ru"> <strong>Russian</strong>: <a href="https://github.com/uprock/javascript" target="_blank" rel="external">uprock/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png" alt="es"> <strong>Spanish</strong>: <a href="https://github.com/paolocarrasco/javascript-style-guide" target="_blank" rel="external">paolocarrasco/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png" alt="th"> <strong>Thai</strong>: <a href="https://github.com/lvarayut/javascript-style-guide" target="_blank" rel="external">lvarayut/javascript-style-guide</a></li>
</ul>
<h2 id="JavaScript-风格指南说明"><a href="#JavaScript-风格指南说明" class="headerlink" title="JavaScript 风格指南说明"></a><a name="the-javascript-style-guide-guide">JavaScript 风格指南说明</a></h2><ul>
<li><a href="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide" target="_blank" rel="external">Reference</a></li>
</ul>
<h2 id="与我们讨论-JavaScript"><a href="#与我们讨论-JavaScript" class="headerlink" title="与我们讨论 JavaScript"></a><a name="chat-with-us-about-javascript">与我们讨论 JavaScript</a></h2><ul>
<li>Find us on <a href="https://gitter.im/airbnb/javascript" target="_blank" rel="external">gitter</a>.</li>
</ul>
<h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a><a name="contributors">贡献者</a></h2><ul>
<li><a href="https://github.com/airbnb/javascript/graphs/contributors" target="_blank" rel="external">View Contributors</a></li>
</ul>
<h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a><a name="license">许可</a></h2><p>(The MIT License)</p>
<p>Copyright (c) 2014 Airbnb</p>
<p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p>
<p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;用更合理的方式写 JavaScript&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://gdfed.github.io/categories/js/"/>
    
    
      <category term="ES5" scheme="https://gdfed.github.io/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>简单封装template</title>
    <link href="https://gdfed.github.io/2017/04/25/%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85templatejs/"/>
    <id>https://gdfed.github.io/2017/04/25/简单封装templatejs/</id>
    <published>2017-04-25T07:07:49.000Z</published>
    <updated>2017-08-31T11:54:24.810Z</updated>
    
    <content type="html"><![CDATA[<p>简单封装template<br><a id="more"></a><br>1.先来一个例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"template"</span>&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;<span class="string">'&#123;&#123;'</span>name<span class="string">'&#125;&#125;'</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;'&#123;&#123;'skill'&#125;&#125;'&lt;/</span>li&gt;</div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line"></div><div class="line"> name: <span class="string">'jack'</span>,</div><div class="line"></div><div class="line"> skill: <span class="string">'jump'</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> templateDom = <span class="built_in">document</span>.getElementById(<span class="string">'template'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> string = templateDom.innerHTML;</div><div class="line"></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/'&#123;&#123;'(\w+)'&#125;&#125;'/</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = reg.exec(string);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (result) &#123;</div><div class="line"></div><div class="line">string = string.replace(result[<span class="number">0</span>],data[result[<span class="number">1</span>]]);</div><div class="line"></div><div class="line">result = reg.exec(string);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = string;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>结果:</p>
<ul>
<li>jack</li>
<li>jump</li>
</ul>
<p>2.进行函数封装:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span>(<span class="params">id,data</span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> templateDom =<span class="built_in">document</span>.getElementById(id);</div><div class="line"></div><div class="line"><span class="keyword">var</span> string =templateDom.innerHTML;</div><div class="line"></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/'&#123;&#123;'(\w+)'&#125;&#125;'/</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result =reg.exec(string);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (result) &#123;</div><div class="line"></div><div class="line">string = string.replace(result[<span class="number">0</span>],data[result[<span class="number">1</span>]]);</div><div class="line"></div><div class="line">result = reg.exec(string);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> string;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进行调用一下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.innerHTML =template(<span class="string">'template'</span>, &#123;</div><div class="line"></div><div class="line">name: <span class="string">'rose'</span>,</div><div class="line"></div><div class="line">skill: <span class="string">'beautiful'</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果:</p>
<ul>
<li>rose</li>
<li>beautiful</li>
</ul>
<p>3.注意事项:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"template"</span>&gt;</div><div class="line"></div><div class="line">&lt;ul&gt;</div><div class="line"></div><div class="line">&lt;li&gt;<span class="string">'&#123;&#123;'</span>name<span class="string">'&#125;&#125;'</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;li&gt;'&#123;&#123;'skill'&#125;&#125;'&lt;/</span>li&gt;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure>
<p>a.上面”‘‘“里面的内容要根据data的key来设置;</p>
<p>b.type只要不为text/javaScript,html可以换成其他的名字,如test,但设置为html,编辑器可实现代码自动提示以及高亮的效果;</p>
<p>c.必须给定一个id(id具有唯一性),调用函数时通过id获取对应作用元素.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/'&#123;&#123;'(\w+)'&#125;&#125;'/</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = reg.exec(string);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
<p>d.打印出来的result注意理解(正则表达式exec方法);</p>
<p>4.大神做的template可见:<a href="https://aui.github.io/art-template/docs/" target="_blank" rel="external">https://aui.github.io/art-template/docs/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单封装template&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://gdfed.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://gdfed.github.io/tags/js/"/>
    
      <category term="template" scheme="https://gdfed.github.io/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>jQuery瀑布流技术封装并制定插件</title>
    <link href="https://gdfed.github.io/2017/04/12/jQuery%E7%80%91%E5%B8%83%E6%B5%81%E6%8A%80%E6%9C%AF%E5%B0%81%E8%A3%85%E5%B9%B6%E5%88%B6%E5%AE%9A%E6%8F%92%E4%BB%B6/"/>
    <id>https://gdfed.github.io/2017/04/12/jQuery瀑布流技术封装并制定插件/</id>
    <published>2017-04-12T07:13:27.000Z</published>
    <updated>2017-08-31T12:04:54.017Z</updated>
    
    <content type="html"><![CDATA[<p>瀑布流布局,其实是一种绝对定位(absolute)布局.</p>
<a id="more"></a>
<p>原理分析:</p>
<p>1.html,css结构 : 子绝父相</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"items"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2.给每一个子元素进行top,left设置定位</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*需求1:设置原始数据</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">一排元素个数n : items的宽度/item的宽度 向下取整</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">间隙margin: (items的宽度-n*item的宽度)/(n+1)</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">一排元素的总高度集合topArr: 长度为n 元素为对应item的高度 初始值都为margin</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">需求2:设置第一排dom元素位置</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">需求2.1:修改topArr里面元素的值</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> itemWidth = $(<span class="string">'.item'</span>).width();</div><div class="line"></div><div class="line"><span class="keyword">var</span> n =<span class="built_in">Math</span>.floor($(<span class="string">'.items'</span>).width() /itemWidth);</div><div class="line"></div><div class="line"><span class="keyword">var</span> margin = ($(<span class="string">'.items'</span>).width() -n *itemWidth) / (n +<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> topArr = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (vari =<span class="number">0</span>;i &lt; n; i++) &#123;</div><div class="line"></div><div class="line">topArr[i] =margin;</div><div class="line"></div><div class="line">$(<span class="string">'.item'</span>).eq(i).css(&#123;</div><div class="line"></div><div class="line">top: topArr[i],</div><div class="line"></div><div class="line">left: (margin +itemWidth) *i +margin</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">topArr[i] +=$(<span class="string">'.item'</span>).eq(i).height();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*需求3:判断topArr中最小值及index,依次将后面的item元素放在其后面</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">需求3.1:每次放置后,修改topArr里面元素的值*/</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (vari =n;i &lt; $(<span class="string">'.item'</span>).length;i++) &#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> minH =<span class="literal">Infinity</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> minIndex = <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (varj =<span class="number">0</span>;j &lt; n; j++) &#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (topArr[j] &lt;minH) &#123;</div><div class="line"></div><div class="line">minH = topArr[j];</div><div class="line"></div><div class="line">minIndex = j;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="string">'.item'</span>).eq(i).css(&#123;</div><div class="line"></div><div class="line">top: minH,</div><div class="line"></div><div class="line">left: (margin +itemWidth) *minIndex +margin</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">topArr[minIndex] +=$(<span class="string">'.item'</span>).eq(i).height();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/需求<span class="number">4</span>:设置父容器高度/</div><div class="line"></div><div class="line"><span class="keyword">var</span> maxH = -<span class="literal">Infinity</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(topArr[i]&gt;maxH)&#123;</div><div class="line"></div><div class="line">maxH = topArr[i];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="string">'.items'</span>).height(maxH);</div><div class="line"></div><div class="line">$.fn.extend(&#123;</div><div class="line"></div><div class="line">waterfall: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">/<span class="keyword">this</span>指向调用该函数的jQuery对象/</div><div class="line"></div><div class="line"><span class="keyword">var</span> itemWidth =<span class="keyword">this</span>.children().width();</div><div class="line"></div><div class="line"><span class="keyword">var</span> n =<span class="built_in">Math</span>.floor(<span class="keyword">this</span>.width() /itemWidth);</div><div class="line"></div><div class="line"><span class="keyword">var</span> margin = (<span class="keyword">this</span>.width() -n *itemWidth) / (n +<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> topArr = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (vari =<span class="number">0</span>;i &lt; n; i++) &#123;</div><div class="line"></div><div class="line">topArr[i] =margin;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.children().eq(i).css(&#123;</div><div class="line"></div><div class="line">top: topArr[i],</div><div class="line"></div><div class="line">left: (margin +itemWidth) *i +margin</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">topArr[i] +=<span class="keyword">this</span>.children().eq(i).height();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (vari =n;i &lt; <span class="keyword">this</span>.children().length;i++) &#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> minH =<span class="literal">Infinity</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> minIndex = <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (varj =<span class="number">0</span>;j &lt; n; j++) &#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (topArr[j] &lt;minH) &#123;</div><div class="line"></div><div class="line">minH = topArr[j];</div><div class="line"></div><div class="line">minIndex = j;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.children().eq(i).css(&#123;</div><div class="line"></div><div class="line">top: minH,</div><div class="line"></div><div class="line">left: (margin +itemWidth) *minIndex +margin</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">topArr[minIndex] +=<span class="keyword">this</span>.children().eq(i).height();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> maxH = -<span class="literal">Infinity</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(topArr[i]&gt;maxH)&#123;</div><div class="line"></div><div class="line">maxH = topArr[i];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.height(maxH);</div><div class="line"></div><div class="line">/返回<span class="keyword">this</span>,也是jQuery链式编程的逻辑/</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(<span class="string">'.items'</span>).waterfall();</div></pre></td></tr></table></figure>
<p>3.添加浏览器缩放事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">$(<span class="string">'.items'</span>).waterfall();</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;瀑布流布局,其实是一种绝对定位(absolute)布局.&lt;/p&gt;
    
    </summary>
    
      <category term="jQuery" scheme="https://gdfed.github.io/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://gdfed.github.io/tags/jQuery/"/>
    
      <category term="js" scheme="https://gdfed.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>原生js模拟jQuery对象调用click事件理解this和$(this)</title>
    <link href="https://gdfed.github.io/2017/03/25/%E5%8E%9F%E7%94%9Fjs%E6%A8%A1%E6%8B%9FjQuery%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8click%E4%BA%8B%E4%BB%B6%E7%90%86%E8%A7%A3this/"/>
    <id>https://gdfed.github.io/2017/03/25/原生js模拟jQuery对象调用click事件理解this/</id>
    <published>2017-03-25T09:11:20.000Z</published>
    <updated>2017-08-31T11:55:06.056Z</updated>
    
    <content type="html"><![CDATA[<p>原生js中,this指向调用的dom元素;<br>jQuery中,事件回调函数中的this也指向dom元素,所以在回调函数中$(this)才是指向jQuery的对象.<br>这个要和jQuery中插件创建里面的this进行区分,里面的this则指向调用对象,即jQuery对象.<br>之前一直对这个不理解,所以现在通过一个例子来进行自己的理解分析:<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bodyDom = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line"></div><div class="line"><span class="comment">/*bodyDom.onclick = function () &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">console.log('我是Dom事件');</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">&#125;;*/</span></div><div class="line"></div><div class="line">bodyDom.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'我是Dom事件'</span>);</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dom = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> ele == <span class="string">'object'</span>)&#123;</div><div class="line"></div><div class="line">dom =ele;</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">dom = <span class="built_in">document</span>.querySelector(ele);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> objDom = &#123;</div><div class="line"></div><div class="line"><span class="number">0</span>:dom,</div><div class="line"></div><div class="line">length:<span class="number">1</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">objDom.click =<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (vari = <span class="number">0</span>; i &lt; objDom.length;i++) &#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> element = objDom[i];</div><div class="line"></div><div class="line">element.addEventListener(<span class="string">"click"</span>,fn); </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> objDom;</div><div class="line"></div><div class="line">&#125; </div><div class="line"></div><div class="line">$(<span class="string">'body'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'我是$封装事件'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log($(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原生js中,this指向调用的dom元素;&lt;br&gt;jQuery中,事件回调函数中的this也指向dom元素,所以在回调函数中$(this)才是指向jQuery的对象.&lt;br&gt;这个要和jQuery中插件创建里面的this进行区分,里面的this则指向调用对象,即jQuery对象.&lt;br&gt;之前一直对这个不理解,所以现在通过一个例子来进行自己的理解分析:&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://gdfed.github.io/categories/js/"/>
    
    
      <category term="jQuery" scheme="https://gdfed.github.io/tags/jQuery/"/>
    
      <category term="js" scheme="https://gdfed.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://gdfed.github.io/2017/01/14/Git/"/>
    <id>https://gdfed.github.io/2017/01/14/Git/</id>
    <published>2017-01-14T06:28:41.000Z</published>
    <updated>2017-08-31T11:56:02.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h2><h3 id="源代码管理工具-版本控制-的好处"><a href="#源代码管理工具-版本控制-的好处" class="headerlink" title="源代码管理工具(版本控制)的好处"></a>源代码管理工具(版本控制)的好处</h3><p>a、利于团队开发</p>
<p>b、对于个人开发</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--&gt;对某个功能的修改操作</div></pre></td></tr></table></figure>
<h3 id="版本控制工具的种类"><a href="#版本控制工具的种类" class="headerlink" title="版本控制工具的种类"></a>版本控制工具的种类</h3><ul>
<li>git(github)</li>
<li>svn</li>
<li>java：maven</li>
<li>.net：vss tfs</li>
</ul>
<h3 id="源代码管理工具按照功能划分"><a href="#源代码管理工具按照功能划分" class="headerlink" title="源代码管理工具按照功能划分"></a>源代码管理工具按照功能划分</h3><p>a、本地代码管理        –&gt;用于个人开发           –&gt;被淘汰<br>b、集中式源代码管理工具(svn)<br>c、分布式。。。。。。。(git)       –&gt;兼具了a+b的功能<br><a id="more"></a></p>
<h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><h3 id="git-init-将当前文件夹进行初始化"><a href="#git-init-将当前文件夹进行初始化" class="headerlink" title="git init 将当前文件夹进行初始化"></a>git init 将当前文件夹进行初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--&gt;一定要明确你要将哪个文件夹被git管理起来</div></pre></td></tr></table></figure>
<h3 id="git-status-可以查看仓库中的文件状态"><a href="#git-status-可以查看仓库中的文件状态" class="headerlink" title="git status 可以查看仓库中的文件状态"></a>git status 可以查看仓库中的文件状态</h3><ul>
<li><p>在往git仓库中添加文件的时候，这些刚添加的文件，状态是：未追踪(Untracked)</p>
</li>
<li><p>对于已经进入过暂存区的文件，文件的状态是：to be committed</p>
</li>
<li><p>对于已经进入过暂存区的文件，再次修改文件，文件的状态是：modified</p>
<p>–&gt;如果当前文件夹下面的某个文件夹是空的，不会显示在结果中</p>
</li>
</ul>
<h3 id="git-add-文件名–-gt-将指定的文件放到暂存区"><a href="#git-add-文件名–-gt-将指定的文件放到暂存区" class="headerlink" title="git add 文件名–&gt;将指定的文件放到暂存区"></a>git add 文件名–&gt;将指定的文件放到暂存区</h3><p>把文件放到暂存区之后，状态是：待提交(changes to be committed)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add *.后缀名 把指定后缀名的所有文件提交暂存区</div></pre></td></tr></table></figure>
<p>–&gt;git add 命令不仅仅可以将新添加的文件放到暂存区，也可以将已修改的文件放到暂存区</p>
<h3 id="git-add-指定目录–-gt-将指定目录下面的文件放到暂存区"><a href="#git-add-指定目录–-gt-将指定目录下面的文件放到暂存区" class="headerlink" title="git add 指定目录–&gt;将指定目录下面的文件放到暂存区"></a>git add 指定目录–&gt;将指定目录下面的文件放到暂存区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果当前仓库的根目录（.git文件夹位于的目录） git add .将仓库下面的没有被提交到暂存区的代码放到暂存区</div></pre></td></tr></table></figure>
<p>git add .   –&gt;将当前仓库中的所有的没有被提交到暂存区的代码放到暂存区</p>
<h3 id="git-commit-提交本地仓库"><a href="#git-commit-提交本地仓库" class="headerlink" title="git commit 提交本地仓库"></a>git commit 提交本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit 会要求填写提交信息</div><div class="line">git commit -m &quot;this is first commit&quot; 直接带信息提交(可以不带引号,但信息必须没有空格)</div></pre></td></tr></table></figure>
<h3 id="git-log-查看日志"><a href="#git-log-查看日志" class="headerlink" title="git log 查看日志"></a>git log 查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --oneline   查看日志简略信息</div></pre></td></tr></table></figure>
<h3 id="关于用户名和邮箱的配置"><a href="#关于用户名和邮箱的配置" class="headerlink" title="关于用户名和邮箱的配置"></a>关于用户名和邮箱的配置</h3><p>–&gt;如果从来没有过，在提交到本地主仓库之前不会有任何问题，但是git commit -m 都会提示你没有配置过，如果没有配置过，是无法正常提交代码，报错信息：Please tell me who you are</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git config --global user.name xxx   设置用户名</div><div class="line"></div><div class="line">git config --globa user.email xxx@xx.com   设置用户邮箱</div><div class="line"></div><div class="line">git config --global user.name   查看用户名</div><div class="line"></div><div class="line">git config --globa user.email   查看用户邮箱</div><div class="line"></div><div class="line">--&gt;可以通过--global选项实现在本机一次配置多次使用</div></pre></td></tr></table></figure>
<h3 id="git-push-服务器仓库地址-master"><a href="#git-push-服务器仓库地址-master" class="headerlink" title="git push 服务器仓库地址 master"></a>git push 服务器仓库地址 master</h3><p>–&gt;将本地主仓库中的代码上传到服务器中</p>
<h3 id="git-clone-服务器仓库地址"><a href="#git-clone-服务器仓库地址" class="headerlink" title="git clone 服务器仓库地址"></a>git clone 服务器仓库地址</h3><p>–&gt;将服务器代码克隆到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone 服务器仓库地址 apphome   修改仓库名为apphome</div></pre></td></tr></table></figure>
<h3 id="git-pull-服务器仓库地址-master"><a href="#git-pull-服务器仓库地址-master" class="headerlink" title="git pull 服务器仓库地址 master"></a>git pull 服务器仓库地址 master</h3><p> –&gt;将服务器代码更新到本地(关联)</p>
<p>说明：<br>a、只有文件夹中有.git文件夹，仓库就一直有效，–&gt;一旦把.git文件夹删除，那么仓库就废了<br>b、git会忽略所有的空文件夹<br>c、git管理的文件，不要轻易重命名文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--&gt;1.txt--&gt;2.txt这样的重命名操作将会被识别为：删除了1.txt，创建了2.txt</div></pre></td></tr></table></figure>
<h2 id="2个场景"><a href="#2个场景" class="headerlink" title="2个场景"></a>2个场景</h2><h3 id="服务器仓库是空仓库"><a href="#服务器仓库是空仓库" class="headerlink" title="服务器仓库是空仓库"></a>服务器仓库是空仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">touch 1.txt</div><div class="line">git add 1.txt</div><div class="line">git commit -m 提交了1.txt</div><div class="line">git push 服务器仓库地址 master</div></pre></td></tr></table></figure>
<h3 id="服务器仓库是非空仓库-☆☆☆工作中更常见☆☆☆"><a href="#服务器仓库是非空仓库-☆☆☆工作中更常见☆☆☆" class="headerlink" title="服务器仓库是非空仓库(☆☆☆工作中更常见☆☆☆)"></a>服务器仓库是非空仓库(☆☆☆工作中更常见☆☆☆)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git pull 服务器仓库地址 master</div><div class="line">touch 2.txt</div><div class="line">git add 2.txt</div><div class="line">git commit -m 创建了2.txt</div><div class="line">git push 服务器仓库地址 master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本控制工具&quot;&gt;&lt;a href=&quot;#版本控制工具&quot; class=&quot;headerlink&quot; title=&quot;版本控制工具&quot;&gt;&lt;/a&gt;版本控制工具&lt;/h2&gt;&lt;h3 id=&quot;源代码管理工具-版本控制-的好处&quot;&gt;&lt;a href=&quot;#源代码管理工具-版本控制-的好处&quot; class=&quot;headerlink&quot; title=&quot;源代码管理工具(版本控制)的好处&quot;&gt;&lt;/a&gt;源代码管理工具(版本控制)的好处&lt;/h3&gt;&lt;p&gt;a、利于团队开发&lt;/p&gt;
&lt;p&gt;b、对于个人开发&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;--&amp;gt;对某个功能的修改操作&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;版本控制工具的种类&quot;&gt;&lt;a href=&quot;#版本控制工具的种类&quot; class=&quot;headerlink&quot; title=&quot;版本控制工具的种类&quot;&gt;&lt;/a&gt;版本控制工具的种类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git(github)&lt;/li&gt;
&lt;li&gt;svn&lt;/li&gt;
&lt;li&gt;java：maven&lt;/li&gt;
&lt;li&gt;.net：vss tfs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;源代码管理工具按照功能划分&quot;&gt;&lt;a href=&quot;#源代码管理工具按照功能划分&quot; class=&quot;headerlink&quot; title=&quot;源代码管理工具按照功能划分&quot;&gt;&lt;/a&gt;源代码管理工具按照功能划分&lt;/h3&gt;&lt;p&gt;a、本地代码管理        –&amp;gt;用于个人开发           –&amp;gt;被淘汰&lt;br&gt;b、集中式源代码管理工具(svn)&lt;br&gt;c、分布式。。。。。。。(git)       –&amp;gt;兼具了a+b的功能&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://gdfed.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://gdfed.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>bash常见命令</title>
    <link href="https://gdfed.github.io/2017/01/03/bash%E5%91%BD%E4%BB%A4/"/>
    <id>https://gdfed.github.io/2017/01/03/bash命令/</id>
    <published>2017-01-03T02:17:01.000Z</published>
    <updated>2017-08-31T12:08:44.160Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell（壳）"><a href="#shell（壳）" class="headerlink" title="shell（壳）"></a>shell（壳）</h4><ul>
<li>shell其实它是操作系统内核和用户之间的一个纽带(桥梁)<ul>
<li>用户操作shell，shell操作操作系统内核，操作系统内核操作计算机硬件</li>
</ul>
</li>
<li>shell的种类：<ul>
<li>命令行shell<ul>
<li>windows:   cmd   powershell</li>
<li>mac os :   终端(terminal)</li>
<li>linux:   sh   bash</li>
</ul>
</li>
<li>图形化shell<ul>
<li>windows操作系统</li>
<li>mac os</li>
<li>linux–&gt;ubuntu等</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="clear-清屏"><a href="#clear-清屏" class="headerlink" title="clear 清屏"></a>clear 清屏</h4><h4 id="Ctrl-C-或者-Q-阻止进程"><a href="#Ctrl-C-或者-Q-阻止进程" class="headerlink" title="Ctrl + C 或者 Q   阻止进程"></a>Ctrl + C 或者 Q   阻止进程</h4><h4 id="pwd-print-working-directory"><a href="#pwd-print-working-directory" class="headerlink" title="pwd(print working directory)"></a>pwd(print working directory)</h4><p>打印出<code>当前</code>目录(文件夹)路径的全名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pwd 例如当前位于桌面：c:/users/用户名/desktop</div></pre></td></tr></table></figure>
<h4 id="ls-list"><a href="#ls-list" class="headerlink" title="ls(list)"></a>ls(list)</h4><p>列举出<code>当前</code>目录（文件夹）下面的所有的<code>直接</code>子文件和子文件夹</p>
<pre><code>--&gt;列举出来的文件夹名称有/结尾的，但是文件没有/结尾的
</code></pre><p>列举任意目录下面的所有的子文件和文件夹</p>
<pre><code>ls 指定目录路径

ls -l 列举出来的文件和文件夹包含了文件的创建者/创建时间等信息
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -a 列举当前目录下面的所有的子文件和文件夹，同时包含了2个目录(./和../)</div></pre></td></tr></table></figure>
<h4 id=""><a href="#" class="headerlink" title="."></a>.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.表示当前目录</div></pre></td></tr></table></figure>
<h4 id="-1"><a href="#-1" class="headerlink" title=".."></a>..</h4><pre><code>..表示上级目录
</code></pre><h4 id="cd-change-directory"><a href="#cd-change-directory" class="headerlink" title="cd(change directory)"></a>cd(change directory)</h4><p>切换当前位于的文件夹</p>
<pre><code>--&gt;切换文件夹之后，最好使用pwd检测当前的文件夹是否发生了变化

cd 指定的文件夹路径
cd 默认情况下只能切换到当前目录下面的子目录
如果想要回到上级目录，应该使用：cd ../
如果想要回到上上级目录，应该使用：cd ../../
</code></pre><h4 id="命令名称-选项1-选项2"><a href="#命令名称-选项1-选项2" class="headerlink" title="命令名称 -选项1 -选项2"></a>命令名称 -选项1 -选项2</h4><p><code>或者</code>命令名称 -选项1选项2</p>
<pre><code>ls -al === ls -a -l 列举当前目录下面的所有的子文件和文件夹，并且显示详细信息，同时包含了2个目录(.和..)

ls -l === ls -list === ls --list

ls -a === ls -all === ls --all
</code></pre><h4 id="mkdir-make-dirctory"><a href="#mkdir-make-dirctory" class="headerlink" title="mkdir(make dirctory)"></a>mkdir(make dirctory)</h4><p>创建文件夹</p>
<p>语法格式:   mkdir 文件夹名称</p>
<ul>
<li><p>默认情况下，只能在<code>当前</code>目录下面创建文件夹</p>
<p>–&gt;可以连续创建多个文件夹：mkdir a1 a2 a3</p>
</li>
<li><p>也可以在指定目录下面创建文件夹：mkdir 指定的文件夹路径/新文件夹名称<br>–&gt;要确保指定的文件夹路径存在</p>
<p>–&gt;执行命令：mkdir app/css</p>
<ul>
<li>只有当app存在的时候才能创建css文件夹；如果不存在就会创建失败</li>
<li>如果一定要实现在app本身就不存在的时候创建css,就需要通过以下方式：<pre><code>- mkdir app/css -p：首先创建app，然后创建css
</code></pre></li>
</ul>
</li>
</ul>
<h4 id="mkdir-目录1-目录2-目录3-p"><a href="#mkdir-目录1-目录2-目录3-p" class="headerlink" title="mkdir 目录1/目录2/目录3 -p"></a>mkdir 目录1/目录2/目录3 -p</h4><pre><code>--&gt;可以连续创建多级目录，哪怕目录1/目录2都不存在,如果某个目录不存在，先创建该目录，再创建子目录
</code></pre><h4 id="rmdir-remove-directory"><a href="#rmdir-remove-directory" class="headerlink" title="rmdir(remove directory)"></a>rmdir(remove directory)</h4><p>只能删除<code>空</code>文件夹</p>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>删除文件</p>
<ul>
<li>语法格式：rm 文件路径(不能删除文件路径(即文件夹))<ul>
<li>如果删除的文件路径不存在，那么会报错</li>
</ul>
</li>
<li>不能删除自身，也不能删除父目录（不能含有.和..）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm -f 如果说要删除的文件、文件夹不存在，不会显示错误信息</div><div class="line"></div><div class="line">rm -r 递归删除(常用于删除非空文件夹)--&gt;这个可以删除文件夹,慎用</div></pre></td></tr></table></figure>
<p>(☆☆☆慎用☆☆☆)rm -rf 递归删除指定的文件/文件夹</p>
<h4 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h4><p>语法格式：touch 含有后缀的文件名</p>
<p>–&gt;默认是在当前目录下面创建指定的文件</p>
<pre><code>连续的在当前目录下面创建多个文件
</code></pre><p>touch 文件夹/文件名：在指定文件夹下面创建指定的文件</p>
<h4 id="cp-copy"><a href="#cp-copy" class="headerlink" title="cp(copy)"></a>cp(copy)</h4><p>复制指定的文件/文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">语法格式：cp   源文件的路径(文件夹+文件名)   新文件的路径(文件夹)</div><div class="line"></div><div class="line">复制文件夹：cp   源文件夹路径   新文件夹路径   -r</div></pre></td></tr></table></figure>
<h4 id="mv-move"><a href="#mv-move" class="headerlink" title="mv(move)"></a>mv(move)</h4><p>移动文件(剪切+粘贴)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">语法格式：mv   源文件的路径(文件夹+文件名)   新文件的路径(文件夹)</div><div class="line"></div><div class="line">移动并重命名：mv   源文件的路径(文件夹+文件名)   新文件的路径(文件夹)+新文件名</div><div class="line"></div><div class="line">直接对一个文件重命名：mv   源文件的路径(原文件夹+原文件名)   原文件夹+新文件名</div></pre></td></tr></table></figure>
<h4 id="cat-查看文档"><a href="#cat-查看文档" class="headerlink" title="cat 查看文档"></a>cat 查看文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat 路径文档</div></pre></td></tr></table></figure>
<p>–&gt;可能乱码,需保持编码一致(一般UTF-8)</p>
<p><strong>任何命令(bash/git)都可以通过–help查看该命令的参数、选项</strong></p>
<h4 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h4><p>对一些简单文本文件进行编辑操作</p>
<p>比如一些特殊的文件：ppt/excel/word/图片/xmind都是不能用记事本打开的，也就不能用vi编辑器来进行编辑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi 文件路径</div><div class="line"></div><div class="line">打开一个窗口，实现对该文件进行编辑</div></pre></td></tr></table></figure>
<p>进入编辑模式：i或者a键</p>
<p>退出编辑模式：esc键</p>
<p>如果当前不处于编辑模式，想要实现保存的功能：”:w”</p>
<p>………………….想要实现退出的功能：”:q”</p>
<p>…………………想要实现保存并退出的功能：”:wq”</p>
<pre><code>--&gt;如果当前位于编辑模式，应该首先退出编辑模式，然后再实现保存or退出的功能
--&gt;如果有内容不需要保存并退出的话，建议：先退出编辑模式，然后命令&quot;:q!&quot;
   注意：:!q是没用的

一旦有内容没有保存直接关闭了编辑器窗口，下次的编辑该文件进入错误页面，需要按下d键删除之前的内容
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;shell（壳）&quot;&gt;&lt;a href=&quot;#shell（壳）&quot; class=&quot;headerlink&quot; title=&quot;shell（壳）&quot;&gt;&lt;/a&gt;shell（壳）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;shell其实它是操作系统内核和用户之间的一个纽带(桥梁)&lt;ul&gt;
&lt;li&gt;用户操作shell，shell操作操作系统内核，操作系统内核操作计算机硬件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shell的种类：&lt;ul&gt;
&lt;li&gt;命令行shell&lt;ul&gt;
&lt;li&gt;windows:   cmd   powershell&lt;/li&gt;
&lt;li&gt;mac os :   终端(terminal)&lt;/li&gt;
&lt;li&gt;linux:   sh   bash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形化shell&lt;ul&gt;
&lt;li&gt;windows操作系统&lt;/li&gt;
&lt;li&gt;mac os&lt;/li&gt;
&lt;li&gt;linux–&amp;gt;ubuntu等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="https://gdfed.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://gdfed.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发环境搭建拓展篇(git)</title>
    <link href="https://gdfed.github.io/2016/12/15/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8B%93%E5%B1%95%E7%AF%87/"/>
    <id>https://gdfed.github.io/2016/12/15/微信公众号开发环境搭建拓展篇/</id>
    <published>2016-12-15T12:59:24.000Z</published>
    <updated>2017-08-31T12:01:06.508Z</updated>
    
    <content type="html"><![CDATA[<p>​        上一篇讲到了新浪云应用，现在我们来讲讲里面的一些好用好玩的东西。</p>
<p>​        博主会以实践中的过程来讲，目的为了使博主自己对这些有趣的东西加深映象；这也是小白级别的，所以各路大神请绕道或者可以给予更多的点评（博主need you，额..貌似也不会看）。文章里面会更多的讲述博主在<a href="http://lib.csdn.net/base/wechat" target="_blank" rel="external">微信</a>公众号开发环境搭建的时候遇到了一些有趣的东西和大家分享，对于概念性定义会跳转到百度词条，毕竟此时的博主不能对各种术语进行很好的诠释，并且在文中出现的有偏驳之处，还请看客老爷指正，以免博主以及其他看客老爷们入更深的坑。</p>
<a id="more"></a>
<h2 id="SAE"><a href="#SAE" class="headerlink" title="SAE"></a>SAE</h2><p>全称Sina App Engine（链接地址：<a href="http://sinaapp.com/" target="_blank" rel="external">http://sinaapp.com/</a>），定义见<a href="http://baike.baidu.com/link?url=rUx6_M533xmcnTew2Fu4TibawJxGsPV0Ms-TLoLE8oJ0TlselybMf4K_1g4fv_dYySNk5Xcsm05iiA2cCnq9Eq" target="_blank" rel="external">百度词条</a>。</p>
<p>当时作为微信公众号平台开发搭建的一个URL（服务器地址）接口，好处：</p>
<p>1.免费二级域名，不用环境架构搭建，非常适用于web开发；</p>
<p>2.多版本控制（Git、SVN等），代码部署方便、迭代便捷。</p>
<p>总结下来：无（jian）脑（dan）凶（shi）残（yong）。</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/" target="_blank" rel="external">GitHub</a>是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。详见<a href="http://baike.baidu.com/link?url=q9FVoiOeqST2Kc3d9GAk9I1cWdjEkr24ULRJYUlQ-fkVZ7U9xd5lH4xAujkxzzxmiMVTkId_SaZIgpYMRhwDRK" target="_blank" rel="external">百度词条</a>。</p>
<p>建议大家去注册一个账号尝试着实践实践，还是挺有趣的。和通常我们这些小白对于代码的管理有不同的体验。</p>
<h2 id="使用Git客户端"><a href="#使用Git客户端" class="headerlink" title="使用Git客户端"></a>使用Git客户端</h2><p>下载Git Bash（window版本 链接：<a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io/</a>），定义见<a href="http://baike.baidu.com/link?url=5sEnmsEgJXZES3xlzFzC18o-fz06TS17rlH-hMV8oTBEMY-GoRFOG2iXRspEVR29QuDKfB13NnhLq3dQmtbEaK" target="_blank" rel="external">百度词条</a>。也可以直接使用CMD。</p>
<p>注意：需要在新浪云应用的创建过程中代码管理必须选择GIT。</p>
<p>然后我们开始来学习Git吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        上一篇讲到了新浪云应用，现在我们来讲讲里面的一些好用好玩的东西。&lt;/p&gt;
&lt;p&gt;​        博主会以实践中的过程来讲，目的为了使博主自己对这些有趣的东西加深映象；这也是小白级别的，所以各路大神请绕道或者可以给予更多的点评（博主need you，额..貌似也不会看）。文章里面会更多的讲述博主在&lt;a href=&quot;http://lib.csdn.net/base/wechat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信&lt;/a&gt;公众号开发环境搭建的时候遇到了一些有趣的东西和大家分享，对于概念性定义会跳转到百度词条，毕竟此时的博主不能对各种术语进行很好的诠释，并且在文中出现的有偏驳之处，还请看客老爷指正，以免博主以及其他看客老爷们入更深的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="微信" scheme="https://gdfed.github.io/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="Git" scheme="https://gdfed.github.io/tags/Git/"/>
    
      <category term="微信" scheme="https://gdfed.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="公众号" scheme="https://gdfed.github.io/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发环境搭建</title>
    <link href="https://gdfed.github.io/2016/12/15/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://gdfed.github.io/2016/12/15/微信公众号开发环境搭建/</id>
    <published>2016-12-15T06:48:14.000Z</published>
    <updated>2017-08-31T12:00:45.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-申请服务器资源"><a href="#第一章-申请服务器资源" class="headerlink" title="第一章 申请服务器资源"></a>第一章 申请服务器资源</h1><h2 id="创建新浪云计算应用"><a href="#创建新浪云计算应用" class="headerlink" title="创建新浪云计算应用"></a>创建新浪云计算应用</h2><h3 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h3><p>我们使用SAE新浪云计算平台作为服务器资源，并且申请PHP环境+MySQL数据库作为程序运行环境。<br>申请地址为：<a href="http://t.cn/R4pEhd7" target="_blank" rel="external">http://www.sinacloud.com/ucenter.html</a><br>点击进入之后，使用新浪微博账号登录；登录之后，按照提示注册个人信息即可。<br><a id="more"></a></p>
<h3 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h3><p>回到首页，在菜单顶部选择 <em>控制台</em> ，再选择 <em>云应用SAE</em> ；进入SAE应用列表，点击下侧的 <em>创建应用</em>，这时会弹出提示， 禁止放置违法违规内容，点击 <em>继续创建</em>；开发语言选择<em>PHP</em>，运行环境为 <em>标准环境</em>，语言版本 <em>5.3</em>，代码管理选择 <em>SVN</em>（新浪云支持<a href="http://lib.csdn.net/base/git" target="_blank" rel="external">Git</a>、SVN、代码打包上传三种提交方式，具体请参考：<a href="http://www.sinacloud.com/doc/sae/tutorial/code-deploy.html" target="_blank" rel="external">https://www.sinacloud.com/doc/sae/tutorial/code-deploy.html</a>），二级域名自己想一个名字，应用名称可以用系统默认填的，然后点击右方的 <em>创建应用</em>，应用创建成功。并自动跳转到应用列表中，可以看到已经有刚才创建的这个应用。</p>
<h3 id="创建版本"><a href="#创建版本" class="headerlink" title="创建版本"></a>创建版本</h3><p>点击刚才创建的应用名称，进入应用主页；点击左侧的 <em>应用管理</em> 下面的 <em>代码管理</em>，在代码管理中，选择使用SVN托管的方式。不要使用云空间和Git的方式，跳转到代码管理，点击右侧的“创建版本”，版本号默认为1，点击创建，有时会弹出安全登录，需要输入安全密码，如果不知道或者忘记了，就点里面的找回密码，重新设置一下。验证通过之后，到这里，就成功创建了一个域名URL为 <a href="http://***.sinaapp.com/" target="_blank" rel="external">http://***.sinaapp.com/</a> 的应用了，记住你的这个URL，后面将会用到。</p>
<h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>下述代码index.<a href="http://lib.csdn.net/base/php" target="_blank" rel="external">php</a>是一个<a href="http://lib.csdn.net/base/wechat" target="_blank" rel="external">微信</a>接口文件，看不懂没有关系，你可以暂时不用弄明白它的意思。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">&lt;？php</div><div class="line"></div><div class="line">header(<span class="string">'Content-type:text'</span>);</div><div class="line"></div><div class="line">define(<span class="string">"TOKEN"</span>, <span class="string">"weixin"</span>);</div><div class="line"></div><div class="line">$wechatObj = <span class="keyword">new</span> wechatCallbackapiTest();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'echostr'</span>])) &#123;</div><div class="line"></div><div class="line">    $wechatObj-&gt;valid();</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">    $wechatObj-&gt;responseMsg();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">wechatCallbackapiTest</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> Str = _GET[<span class="string">"echostr"</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checkSignature())&#123;</div><div class="line"></div><div class="line">            header(<span class="string">'content-type:text'</span>);</div><div class="line"></div><div class="line">            <span class="keyword">echo</span> $echoStr;</div><div class="line"></div><div class="line">            <span class="keyword">exit</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line"></div><div class="line">        signature = _GET[<span class="string">"signature"</span>];</div><div class="line"></div><div class="line">        timestamp = _GET[<span class="string">"timestamp"</span>];</div><div class="line"></div><div class="line">        nonce = _GET[<span class="string">"nonce"</span>];</div><div class="line"></div><div class="line">        $token = TOKEN;</div><div class="line"></div><div class="line">        tmpArr = <span class="keyword">array</span>(token, timestamp, nonce);</div><div class="line"></div><div class="line">        sort($tmpArr, SORT_STRING);</div><div class="line"></div><div class="line">        tmpStr = implode( tmpArr );</div><div class="line"></div><div class="line">        tmpStr = sha1( tmpStr );</div><div class="line"></div><div class="line">        <span class="keyword">if</span>( tmpStr == signature )&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">responseMsg</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line"></div><div class="line">        postStr = GLOBALS[<span class="string">"HTTP_RAW_POST_DATA"</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($postStr))&#123;</div><div class="line"></div><div class="line">            postObj = simplexml_load_string(postStr, <span class="string">'SimpleXMLElement'</span>, LIBXML_NOCDATA);</div><div class="line"></div><div class="line">            fromUsername = postObj-&gt;FromUserName;</div><div class="line"></div><div class="line">            toUsername = postObj-&gt;ToUserName;</div><div class="line"></div><div class="line">            keyword = trim(postObj-&gt;Content);</div><div class="line"></div><div class="line">            $time = time();</div><div class="line"></div><div class="line">            $textTpl = <span class="string">"&lt;xml&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;CreateTime&gt;%s&lt;/CreateTime&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">                        &lt;/xml&gt;"</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(keyword == <span class="string">"?"</span> || keyword == <span class="string">"？"</span>)</div><div class="line"></div><div class="line">            &#123;</div><div class="line"></div><div class="line">                $msgType = <span class="string">"text"</span>;</div><div class="line"></div><div class="line">                $contentStr = date(<span class="string">"Y-m-d H:i:s"</span>,time());</div><div class="line"></div><div class="line">                resultStr = sprintf(textTpl, fromUsername, toUsername, time, msgType, $contentStr);</div><div class="line"></div><div class="line">                <span class="keyword">echo</span> $resultStr;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">echo</span> <span class="string">""</span>;</div><div class="line"></div><div class="line">            <span class="keyword">exit</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>我们将使用上述代码与微信公众平台对接。</p>
<p>回到SAE的代码管理界面中；再选择“上传代码包”，点击上传文件，选择index.zip(对index.php打包)文件，点击上传。</p>
<p>上传成功后中间是一个绿色的横条；如果没有绿色的横条，表示上传失败，需要重试（可以考虑在Chrome浏览器下重试一下）。</p>
<p>点击编辑代码按钮，有时候需要输入自己的安全密码，如果不记得了就点击“找回密码”，安全验证成功后继续之前的操作。<br>我们可以看到index.php已经上传成功，双击可以查看编辑里面的代码<br>新浪云应用的创建就成功了。</p>
<p>经<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="external">测试</a>，有的应用会自动出现一个叫index.html的文件，只需要我们自己上传的index.php和config.yaml文件就可以了。多余的要删除！！！</p>
<h1 id="第二章-启用开发模式"><a href="#第二章-启用开发模式" class="headerlink" title="第二章 启用开发模式"></a>第二章 启用开发模式</h1><h2 id="微信公众平台开发模式"><a href="#微信公众平台开发模式" class="headerlink" title="微信公众平台开发模式"></a>微信公众平台开发模式</h2><h3 id="个人开发者使用测试号"><a href="#个人开发者使用测试号" class="headerlink" title="个人开发者使用测试号"></a>个人开发者使用测试号</h3><p>个人学习开发建议使用测试号 </p>
<p>微信测试号地址：<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login </a></p>
<p>登录后，在接口配置信息中填写刚才生成的URL地址和Token.</p>
<p>URL地址就是上面介绍的云应用的域名地址：<a href="http://1.***.applinzi.com/" target="_blank" rel="external">http://1.***.applinzi.com/</a> 或者  <a href="http://***.applinzi.com/都可以；" target="_blank" rel="external">http://***.applinzi.com/都可以；</a></p>
<p>Token在程序中固定为 weixin</p>
<p>填写好提交，顶部显示配置成功；如果提示“token验证失败”，多重次几次。</p>
<h3 id="企业开发者并且有订阅号或者服务号"><a href="#企业开发者并且有订阅号或者服务号" class="headerlink" title="企业开发者并且有订阅号或者服务号"></a>企业开发者并且有订阅号或者服务号</h3><p>微信公众平台地址：<a href="https://mp.weixin.qq.com/" target="_blank" rel="external">https://mp.weixin.qq.com</a> </p>
<p>登录微信公众平台后台，在左侧列表中最下方，找到“ 基本配置 ”，点击进入服务器配置填写框，点击“修改配置”按钮。</p>
<p>此处的URL为上面介绍的云应用的域名；而Token在index.php中定义为weixin；EncodingAESKey则不用填，点击“随机生成”让自动生成一个；消息加解密方式选择“明文模式”，然后点击“提交”按钮。</p>
<p>在弹出的提示框中，点击“确定”；配置修改后，再点击“启用”按钮；询问“是否确定开启服务器配置”，点击“确定”。如果提示“token验证失败”，可以先重次几次，微信服务器有时候不稳定。另外新浪SAE要求进行实名认证，请先上传身份证进行实名认证并通过审核后再试！</p>
<p>如果还是失败，请先用微信调试器测试一下url和token是否正确(<a href="http://www.cnblogs.com/txw1958/p/weixin-debugger.html" target="_blank" rel="external">点此查看详细测试方法</a>)。</p>
<p>成功启用后，恭喜，你成功启用开发模式。</p>
<h3 id="自动回复"><a href="#自动回复" class="headerlink" title="自动回复"></a>自动回复</h3><p>在上面的例子中，实现了一个发送“?”就能回复当前时间的功能。至此，你的微信公众平台账号已经实现自动回复了。 </p>
<p>如上操作正确的话，最基础的微信公众号开发搭建算是完成了，接下来更多丰富多彩的公众号开发技术还要等你去实现咯。</p>
<p>如有技术问题以及意见，还请各位看客多多指正分享。</p>
<p>技术参考链接：<a href="http://www.cnblogs.com/txw1958/" target="_blank" rel="external">http://www.cnblogs.com/txw1958/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-申请服务器资源&quot;&gt;&lt;a href=&quot;#第一章-申请服务器资源&quot; class=&quot;headerlink&quot; title=&quot;第一章 申请服务器资源&quot;&gt;&lt;/a&gt;第一章 申请服务器资源&lt;/h1&gt;&lt;h2 id=&quot;创建新浪云计算应用&quot;&gt;&lt;a href=&quot;#创建新浪云计算应用&quot; class=&quot;headerlink&quot; title=&quot;创建新浪云计算应用&quot;&gt;&lt;/a&gt;创建新浪云计算应用&lt;/h2&gt;&lt;h3 id=&quot;申请账号&quot;&gt;&lt;a href=&quot;#申请账号&quot; class=&quot;headerlink&quot; title=&quot;申请账号&quot;&gt;&lt;/a&gt;申请账号&lt;/h3&gt;&lt;p&gt;我们使用SAE新浪云计算平台作为服务器资源，并且申请PHP环境+MySQL数据库作为程序运行环境。&lt;br&gt;申请地址为：&lt;a href=&quot;http://t.cn/R4pEhd7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sinacloud.com/ucenter.html&lt;/a&gt;&lt;br&gt;点击进入之后，使用新浪微博账号登录；登录之后，按照提示注册个人信息即可。&lt;br&gt;
    
    </summary>
    
      <category term="微信" scheme="https://gdfed.github.io/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="微信" scheme="https://gdfed.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="公众号" scheme="https://gdfed.github.io/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="新浪云SAE" scheme="https://gdfed.github.io/tags/%E6%96%B0%E6%B5%AA%E4%BA%91SAE/"/>
    
  </entry>
  
  <entry>
    <title>常见正则表达式</title>
    <link href="https://gdfed.github.io/2016/08/25/%E5%B8%B8%E8%A7%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://gdfed.github.io/2016/08/25/常见正则表达式/</id>
    <published>2016-08-25T12:44:28.000Z</published>
    <updated>2017-08-31T11:53:17.520Z</updated>
    
    <content type="html"><![CDATA[<p>汉字：^[\u4e00-\u9fa5]{0,}$</p>
<p>英文和数字：^[A-Za-z0-9]+ 或 ^[A-Za-z0-9]{4,40}</p>
<p>长度为3-20的所有字符：^.{3,20}$</p>
<p>由26个英文字母组成的字符串：^[A-Za-z]+$</p>
<p>由26个大写英文字母组成的字符串：^[A-Z]+$</p>
<p>由26个小写英文字母组成的字符串：^[a-z]+$</p>
<p>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</p>
<p>由数字、26个英文字母或者下划线组成的字符串：^\w+ 或 ^\w{3,20}</p>
<p>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</p>
<p>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}</p>
<p>可以输入含有^%&amp;’,;=?\”等字符：%&amp;’,;=?\x22+</p>
<p>禁止输入含有~的字符：~\x22+<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">一、校验字符的表达式</div><div class="line"></div><div class="line">1 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</div><div class="line"></div><div class="line">2 英文和数字：^[A-Za-z0-9]+ 或 ^[A-Za-z0-9]&#123;4,40&#125;</div><div class="line"></div><div class="line">3 长度为3-20的所有字符：^.&#123;3,20&#125;$</div><div class="line"></div><div class="line">4 由26个英文字母组成的字符串：^[A-Za-z]+$</div><div class="line"></div><div class="line">5 由26个大写英文字母组成的字符串：^[A-Z]+$</div><div class="line"></div><div class="line">6 由26个小写英文字母组成的字符串：^[a-z]+$</div><div class="line"></div><div class="line">7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</div><div class="line"></div><div class="line">8 由数字、26个英文字母或者下划线组成的字符串：^\w+ 或 ^\w&#123;3,20&#125;</div><div class="line"></div><div class="line">9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</div><div class="line"></div><div class="line">10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;</div><div class="line"></div><div class="line">11 可以输入含有^%&amp;&apos;,;=?\&quot;等字符：%&amp;&apos;,;=?\x22+</div><div class="line"></div><div class="line">12 禁止输入含有~的字符：~\x22+</div><div class="line">二、数字</div><div class="line">1 数字：^[0-9]*$</div><div class="line"></div><div class="line">2 n位的数字：^\d&#123;n&#125;$</div><div class="line"></div><div class="line">3 至少n位的数字：^\d&#123;n,&#125;$</div><div class="line"></div><div class="line">4 m-n位的数字：^\d&#123;m,n&#125;$</div><div class="line"></div><div class="line">5 零和非零开头的数字：^(0|1-9*)$</div><div class="line"></div><div class="line">6 非零开头的最多带两位小数的数字：^(1-9*)+(.[0-9]&#123;1,2&#125;)?$</div><div class="line"></div><div class="line">7 带1-2位小数的正数或负数：^(-)?\d+(.\d&#123;1,2&#125;)?$</div><div class="line"></div><div class="line">8 正数、负数、和小数：^(-|+)?\d+(.\d+)?$</div><div class="line"></div><div class="line">9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</div><div class="line"></div><div class="line">10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</div><div class="line"></div><div class="line">11 非零的正整数：^[1-9]\d$ 或 ^(1-9)&#123;1,3&#125; 或 ^\+?[1-9][0-9]*</div><div class="line"></div><div class="line">12 非零的负整数：^-1-90-9&quot;$ 或 ^-[1-9]\d$</div><div class="line"></div><div class="line">13 非负整数：^\d+ 或 ^[1-9]\d*|0</div><div class="line"></div><div class="line">14 非正整数：^-[1-9]\d*|0 或 ^((-\d+)|(0+))</div><div class="line"></div><div class="line">15 非负浮点数：^\d+(.\d+)? 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0</div><div class="line"></div><div class="line">16 非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?)) 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0</div><div class="line"></div><div class="line">17 正浮点数：^[1-9]\d.\d|0.\d[1-9]\d 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))</div><div class="line"></div><div class="line">18 负浮点数：^-([1-9]\d.\d|0.\d[1-9]\d) 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))</div><div class="line"></div><div class="line">19 浮点数：^(-?\d+)(.\d+)? 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)</div><div class="line"></div><div class="line"></div><div class="line">三、特殊需求表达式</div><div class="line"></div><div class="line">1 Email地址：^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$</div><div class="line"></div><div class="line">2 域名：a-zA-Z0-9&#123;0,62&#125;(/.a-zA-Z0-9&#123;0,62&#125;)+/.?</div><div class="line"></div><div class="line">3 InternetURL：[a-zA-z]+://\s* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</div><div class="line"></div><div class="line">4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</div><div class="line"></div><div class="line">5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^((\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</div><div class="line"></div><div class="line">6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</div><div class="line"></div><div class="line">7 身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$</div><div class="line"></div><div class="line">8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)? 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?</div><div class="line"></div><div class="line">9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^a-zA-Z&#123;4,15&#125;$</div><div class="line"></div><div class="line">10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</div><div class="line"></div><div class="line">11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.\d)(?=.[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</div><div class="line"></div><div class="line">12 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</div><div class="line"></div><div class="line">13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</div><div class="line"></div><div class="line">14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</div><div class="line"></div><div class="line">15 钱的输入格式：</div><div class="line"></div><div class="line">16 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^1-9*$</div><div class="line"></div><div class="line">17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|1-9*)$</div><div class="line"></div><div class="line">18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?1-9*)$</div><div class="line"></div><div class="line">19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</div><div class="line"></div><div class="line">20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$</div><div class="line"></div><div class="line">21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$</div><div class="line"></div><div class="line">22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</div><div class="line"></div><div class="line">23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</div><div class="line"></div><div class="line">24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</div><div class="line"></div><div class="line">25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+.x|X[l|L]$</div><div class="line"></div><div class="line">26 中文字符的正则表达式：[\u4e00-\u9fa5]</div><div class="line"></div><div class="line">27 双字节字符：\x00-\xff (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</div><div class="line"></div><div class="line">28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</div><div class="line"></div><div class="line">29 HTML标记的正则表达式：&lt;(\S?)&gt;&gt;.?&lt;/\1&gt;|&lt;.? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</div><div class="line"></div><div class="line">30 首尾空白字符的正则表达式：^\s|\s或(^\s)|(\s) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</div><div class="line"></div><div class="line">31 腾讯QQ号：1-9&#123;4,&#125; (腾讯QQ号从10000开始)</div><div class="line"></div><div class="line">32 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</div><div class="line"></div><div class="line">33 IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)</div><div class="line"></div><div class="line">34 IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d).)&#123;3&#125;(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汉字：^[\u4e00-\u9fa5]{0,}$&lt;/p&gt;
&lt;p&gt;英文和数字：^[A-Za-z0-9]+ 或 ^[A-Za-z0-9]{4,40}&lt;/p&gt;
&lt;p&gt;长度为3-20的所有字符：^.{3,20}$&lt;/p&gt;
&lt;p&gt;由26个英文字母组成的字符串：^[A-Za-z]+$&lt;/p&gt;
&lt;p&gt;由26个大写英文字母组成的字符串：^[A-Z]+$&lt;/p&gt;
&lt;p&gt;由26个小写英文字母组成的字符串：^[a-z]+$&lt;/p&gt;
&lt;p&gt;由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$&lt;/p&gt;
&lt;p&gt;由数字、26个英文字母或者下划线组成的字符串：^\w+ 或 ^\w{3,20}&lt;/p&gt;
&lt;p&gt;中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$&lt;/p&gt;
&lt;p&gt;中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}&lt;/p&gt;
&lt;p&gt;可以输入含有^%&amp;amp;’,;=?\”等字符：%&amp;amp;’,;=?\x22+&lt;/p&gt;
&lt;p&gt;禁止输入含有~的字符：~\x22+&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="https://gdfed.github.io/categories/js/"/>
    
    
      <category term="Reg" scheme="https://gdfed.github.io/tags/Reg/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://gdfed.github.io/2016/08/12/hello-world/"/>
    <id>https://gdfed.github.io/2016/08/12/hello-world/</id>
    <published>2016-08-12T03:55:10.000Z</published>
    <updated>2017-08-31T12:06:34.922Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
